<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

<!-- Maintainer: before making the tarball, remove all .debuginfo files from
    the directory: this saves more than 70 MB. -->
  <!ENTITY anduin-download             "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;">
 <!ENTITY openjdk-download-binary-x86 "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;/OpenJDK-&openjdk-version;+&openjdk-build;-i686-bin.tar.xz">
  <!ENTITY openjdk-bin-md5sum-x86      "e5a9566e3d3a667b9098908b72855da8">
  <!ENTITY openjdk-bin-size-x86        "159Mo">
  <!ENTITY openjdk-bin-buildsize-x86   "307Mo">

<!-- Not uploaded to anduin, since this file is now available under GNU GPLv2
     licence.-->
<!-- Reuploaded to anduin due to the complexity of the download URL, per Bruce's
     request. - Doug -->
  <!ENTITY openjdk-download-binary-x64 "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;/OpenJDK-&openjdk-version;+&openjdk-build;-x86_64-bin.tar.xz">
  <!ENTITY openjdk-bin-md5sum-x64      "1fccb8cd903f395ba1a80c678ba2a2e0">
  <!ENTITY openjdk-bin-size-x64        "160Mo">
  <!ENTITY openjdk-bin-buildsize-x64   "324 MB">
]>

<sect1 id="java" xreflabel="Java-&openjdk-version;">
  <?dbhtml filename="java.html"?>


  <title>Java-&openjdk-version;</title>

  <indexterm zone="java">
    <primary sortas="a-java">JDK Binary</primary>
  </indexterm>


  <sect2>
    <title>About Java</title>
    <para>
      Java is different from most of the packages in LFS and BLFS. It is a
programming language that works with files of bytecode to obtain
instructions and executes them in a Java Virtual Machine (JVM). An
introductory java program looks like:
    </para>

<screen><literal>public class HelloWorld
{
    public static void main(String[] args)
    {
        System.out.println("Hello, World");
    }
}</literal></screen>

    <para>
      This program is saved as <filename>HelloWorld.java</filename>. The file
name, <emphasis>HelloWorld</emphasis>, must match the class name.  It is
then converted into byte code with <command>javac
HelloWorld.java</command>. The output file is
<filename>HelloWorld.class</filename>.  The program is executed with
<command>java HelloWorld</command>.  This creates a JVM and runs the code.
The 'class' extension must not be specified.
    </para>

    <para>
      Several class files can be combined into one file with the
<command>jar</command> command. This is similar to the standard
<command>tar</command> command. For instance, the command <command>jar cf
myjar.jar *.class</command> will combine all class files in a directory into
one jar file. These act as library files.
    </para>

    <para>
      The JVM can search for and use classes in jar files automatically.  It uses
the <envar>CLASSPATH</envar> environment variable to search for jar
files. This is a standard list of colon-separated directory names similar to
the <envar>PATH</envar> environment variable.
    </para>

  </sect2>

  <sect2 id="java-bin" xreflabel="Binário Java" role="package">
    <title>Binary JDK Information</title>

    <para>
      Creating a JVM from source requires a set of circular dependencies.  The
first thing that's needed is a set of programs called a Java Development Kit
(JDK).  This set of programs includes <command>java</command>,
<command>javac</command>, <command>jar</command>, and several others. It
also includes several base <emphasis>jar</emphasis> files.
    </para>

    <para>
      To start, we set up a binary installation of the JDK created by the BLFS
editors.  It is installed in the <filename>/opt</filename> directory to
allow for multiple installations, including a source based version.
    </para>

    &lfs113_checked;

    <bridgehead renderas="sect3">Binary Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Binary download (x86): <ulink url="&openjdk-download-binary-x86;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5: &openjdk-bin-md5sum-x86;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size (binary): &openjdk-bin-size-x86;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &openjdk-bin-buildsize-x86;
        </para>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Binary download (x86_64): <ulink url="&openjdk-download-binary-x64;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5: &openjdk-bin-md5sum-x64;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size (binary): &openjdk-bin-size-x64;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &openjdk-bin-buildsize-x64;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dependências de Java Binary Runtime</bridgehead>
    <para role="required">
      <xref role="runtime" linkend="alsa-lib"/>, <xref role="runtime"
linkend="cups"/>, <xref role="runtime" linkend="giflib"/>, and <xref
role="runtime" linkend="xorg7-lib"/>
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Instalação de the Java BinaryJDK </title>

    <!--
    <note>

      <para>
        The tarball
        <emphasis>openjdk-&openjdk-version;_linux-x64_bin.tar.gz</emphasis> will
        untar to the <emphasis>jdk-&openjdk-version;</emphasis> directory.
      </para>
    </note>
-->
<para>
      Begin by extracting the appropriate binary tarball for your architecture and
changing to the extracted directory. Install the binary
<application>OpenJDK</application> with the following commands as the
<systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>install -vdm755 /opt/OpenJDK-&openjdk-version;-bin &amp;&amp;
mv -v * /opt/OpenJDK-&openjdk-version;-bin         &amp;&amp;
chown -R root:root /opt/OpenJDK-&openjdk-version;-bin</userinput></screen>

    <para>
      The binary version is now installed. You may create a symlink to that
version by issuing, as the <systemitem class="username">root</systemitem>
user:
    </para>

<screen role="root"><userinput>ln -sfn OpenJDK-&openjdk-version;-bin /opt/jdk</userinput></screen>

    <para>
      You may now proceed to <xref linkend="ojdk-conf"/>, where the instructions
assume that the above link exists.
    </para>

  </sect2>

</sect1>
