<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

<!-- Maintainer: before making the tarball, remove all .debuginfo files from
    the directory: this saves more than 70 MB. -->
  <!ENTITY anduin-download             "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;">
 <!ENTITY openjdk-download-binary-x86 "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;/OpenJDK-&openjdk-version;+&openjdk-build;-i686-bin.tar.xz">
  <!ENTITY openjdk-bin-md5sum-x86      "e5a9566e3d3a667b9098908b72855da8">
  <!ENTITY openjdk-bin-size-x86        "159 MB">
  <!ENTITY openjdk-bin-buildsize-x86   "307 MB">

<!-- Not uploaded to anduin, since this file is now available under GNU GPLv2
     licence.-->
<!-- Reuploaded to anduin due to the complexity of the download URL, per Bruce's
     request. - Doug -->
  <!ENTITY openjdk-download-binary-x64 "&sources-anduin-http;/OpenJDK/OpenJDK-&openjdk-version;/OpenJDK-&openjdk-version;+&openjdk-build;-x86_64-bin.tar.xz">
  <!ENTITY openjdk-bin-md5sum-x64      "1fccb8cd903f395ba1a80c678ba2a2e0">
  <!ENTITY openjdk-bin-size-x64        "160 MB">
  <!ENTITY openjdk-bin-buildsize-x64   "324 MB">
]>

<sect1 id="java" xreflabel="Java-&openjdk-version;">
  <?dbhtml filename="java.html"?>


  <title>Java-&openjdk-version;</title>

  <indexterm zone="java">
    <primary sortas="a-java">Binário <quote>JDK</quote></primary>
  </indexterm>


  <sect2>
    <title>Acerca do <quote>Java</quote></title>
    <para>
      Java é diferente da maioria dos pacotes do LFS e BLFS. É uma linguagem de
programação que trabalha com arquivos de códigos de byte para obter
instruções e executá-las em uma &quot;Java Virtual Machine&quot;
(&quot;JVM&quot;). Um aplicativo introdutório Java se parece com:
    </para>

<screen><literal>public class HelloWorld
{
   public static void main(String[] args)
   {
       System.out.println("Hello, World");
   }
}</literal></screen>

    <para>
      Esse aplicativo é salvo como
&quot;<filename>HelloWorld.java</filename>&quot;. O nome do arquivo,
&quot;<emphasis>HelloWorld</emphasis>&quot;, precisa corresponder ao nome da
classe. Em seguida, ele é convertido em código de bytes com
&quot;<command>javac HelloWorld.java</command>&quot;. O arquivo de saída
gerada é &quot;<filename>HelloWorld.class</filename>&quot;. O aplicativo é
executado com &quot;<command>java HelloWorld</command>&quot;. Isso cria uma
&quot;JVM&quot; e executa o código. A extensão 'class' precisa não ser
especificada.
    </para>

    <para>
      Vários arquivos de classe podem ser combinados em um arquivo com o comando
&quot;<command>jar</command>&quot;. Isso é semelhante ao comando
&quot;<command>tar</command>&quot; padrão. Por exemplo, o comando
&quot;<command>jar cf myjar.jar *.class</command>&quot; combinará todos os
arquivos de classe em um diretório em um arquivo&quot; jar&quot;. Eles atuam
como arquivos de biblioteca.
    </para>

    <para>
      A &quot;JVM&quot; consegue procurar e usar classes em arquivos
&quot;jar&quot; automaticamente. Ela usa a variável de ambiente
&quot;<envar>CLASSPATH</envar>&quot; para procurar arquivos
&quot;jar&quot;. Essa é uma lista padrão de nomes de diretórios separados
por dois pontos, semelhante à variável de ambiente
&quot;<envar>PATH</envar>&quot;.
    </para>

  </sect2>

  <sect2 id="java-bin" xreflabel="Binário &quot;Java&quot;" role="package">
    <title>Informações do Binário <quote>JDK</quote></title>

    <para>
      Criar uma &quot;JVM&quot; a partir do fonte exige um conjunto de
dependências circulares. A primeira coisa que é necessária é um conjunto de
aplicativos chamado &quot;Java Development Kit&quot; (&quot;JDK&quot;). Esse
conjunto de aplicativos inclui &quot;<command>java</command>&quot;,
&quot;<command>javac</command>&quot;, &quot;<command>jar</command>&quot; e
vários outros. Ele também inclui vários arquivos
&quot;<emphasis>jar</emphasis>&quot; básicos.
    </para>

    <para>
      Para começar, configuramos uma instalação binária do &quot;JDK&quot; criada
pelos(as) editores(as) do BLFS. Ela é instalada no diretório
&quot;<filename>/opt</filename>&quot; para permitir múltiplas instalações,
incluindo uma versão baseada no fonte.
    </para>

    &lfs113_checked;

    <bridgehead renderas="sect3">Informações do Pacote Binário</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência do binário (x86): <ulink url="&openjdk-download-binary-x86;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &openjdk-bin-md5sum-x86;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência (binário): &openjdk-bin-size-x86;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &openjdk-bin-buildsize-x86;
        </para>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência do binário (x86_64): <ulink
url="&openjdk-download-binary-x64;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &openjdk-bin-md5sum-x64;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência (binário): &openjdk-bin-size-x64;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &openjdk-bin-buildsize-x64;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dependências de Tempo de Execução do Binário &quot;Java&quot;</bridgehead>
    <para role="required">
      <xref role="runtime" linkend="alsa-lib"/>, <xref role="runtime"
linkend="cups"/>, <xref role="runtime" linkend="giflib"/> e <xref
role="runtime" linkend="xorg7-lib"/>
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Instalação do <quote>JDK</quote> do Binário <quote>Java</quote> </title>

    <!--
    <note>

      <para>
        The tarball
        <emphasis>openjdk-&openjdk-version;_linux-x64_bin.tar.gz</emphasis> will
        untar to the <emphasis>jdk-&openjdk-version;</emphasis> directory.
      </para>
    </note>
-->
<para>
      Comece extraindo o &quot;tarball&quot; binário apropriado para tua
arquitetura e mudando para o diretório extraído. Instale o binário
&quot;<application>OpenJDK</application>&quot; com os seguintes comandos
como o(a) usuário(a) &quot;<systemitem
class="username">root</systemitem>&quot;:
    </para>

<screen role="root"><userinput>install -vdm755 /opt/OpenJDK-&openjdk-version;-bin &amp;&amp;
mv -v * /opt/OpenJDK-&openjdk-version;-bin        &amp;&amp;
chown -R root:root /opt/OpenJDK-&openjdk-version;-bin</userinput></screen>

    <para>
      A versão binária agora está instalada. Você pode criar um link simbólico
para essa versão emitindo, como o(a) usuário(a) &quot;<systemitem
class="username">root</systemitem>&quot;:
    </para>

<screen role="root"><userinput>ln -sfn OpenJDK-&openjdk-version;-bin /opt/jdk</userinput></screen>

    <para>
      Agora você pode prosseguir para &quot;<xref linkend="ojdk-conf"/>&quot;,
onde as instruções assumem que o link acima existe.
    </para>

  </sect2>

</sect1>
