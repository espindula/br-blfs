<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY rust-download-http "https://static.rust-lang.org/dist/rustc-&rust-version;-src.tar.xz">
  <!ENTITY rust-download-ftp  "">
  <!ENTITY rust-md5sum        "b6f9973de878e37a589f0989e4138480">
  <!ENTITY rust-size          "145 MB">
  <!ENTITY rust-buildsize     "8.9 GB (292 MB installed); add 6.4 GB if running the tests">
  <!ENTITY rust-time          "6.7 SBU (including download time; add 6.2 SBU for tests, both using
parallelism=8)">
]>

<sect1 id="rust" xreflabel="rustc-&rust-version;">
  <?dbhtml filename="rust.html"?>


  <title>Rustc-&rust-version;</title>

  <indexterm zone="rust">
    <primary sortas="a-rust">Rust</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introdução ao <quote>Rust</quote></title>
    <para>
      A linguagem de programação &quot;<application>Rust</application>&quot; foi
projetada para ser uma linguagem segura, simultânea e prática.
    </para>

    <para>
      Esse pacote é atualizado em um ciclo de lançamento de seis semanas. Por ser
um pacote tão grande e lento de construir, no momento exigido somente por
uns poucos pacotes neste livro, e particularmente porque as versões mais
recentes tendem a quebrar pacotes &quot;Mozilla&quot; mais antigos, os(as)
editores(as) do BLFS consideram que ele somente deveria ser atualizado
quando isso for necessário (seja para corrigir problemas ou para permitir a
construção de uma nova versão de um pacote).
    </para>

    <para>
      Tal como acontece com muitas outras linguagens de programação, o
&quot;Rustc&quot; (o compilador &quot;Rust&quot;) precisa de um binário a
partir do qual inicializar. Ele baixará um binário stage0 no início da
construção, de forma que você não consegue compilá-lo sem uma conexão com a
Internet.
    </para>

    <note>
      <para>
        Embora o BLFS normalmente instale em &quot;<filename
class="directory">/usr</filename>&quot;, quando você atualizar
posteriormente para uma versão mais recente do
&quot;<application>rust</application>&quot;, as bibliotecas antigas em
&quot;<filename class="directory">/usr/lib/rustlib</filename>&quot;
permanecerão, com vários &quot;hashes&quot; nos nomes delas, mas não serão
usáveis e desperdiçarão espaço. Os(As) editores(as) recomendam colocar os
arquivos no diretório &quot;<filename
class="directory">/opt</filename>&quot;. Em particular, se você tiver
motivos para reconstruir com uma configuração modificada (por exemplo,
usando o &quot;LLVM&quot; enviado após construir com &quot;LLVM&quot;
compartilhado, talvez para compilar caixas para arquiteturas que a
construção &quot;LLVM&quot; do BLFS não suporta), [então] é possível que a
instalação deixe um aplicativo quebrado
&quot;<command>cargo</command>&quot;. Em tal situação, remova a instalação
existente primeiro ou use um prefixo diferente, como
&quot;/opt/rustc-&rust-version;-build2&quot;.
      </para>

      <para>
        Se preferir, você pode, certamente, mudar o prefixo para &quot;<filename
class="directory">/usr</filename>&quot;.
      </para>
    </note>

    <para>
      The current <application>rustbuild</application> build-system will use all
processors, although it does not scale well and often falls back to just
using one core while waiting for a library to compile.  However it can be
mostly limited to a specified number of processors by a combination of
adding the switch <literal>--jobs &lt;N&gt;</literal> (e.g. '--jobs 4' to
limit to 4 processors) on each invocation of <command>python3
./x.py</command> <emphasis>and</emphasis> using an environment variable
<envar>CARGO_BUILD_JOBS=&lt;N&gt;</envar>. At the moment this is not
effective when some of the rustc tests are run.
    </para>

    <para>
      A versão atual da caixa &quot;num_cpus&quot; do &quot;Rust&quot; agora
reconhece que &quot;cgroups&quot; pode ser usado para restringir quais
processadores ele está autorizado a usar. Portanto, se sua máquina carece de
&quot;DRAM&quot; (normalmente, menos de dois (02) GB de &quot;DRAM&quot; por
núcleo), [então] isso pode ser uma alternativa para colocar &quot;CPUs&quot;
fora de linha. <phrase revision="sysv">Em sistemas &quot;sysv&quot;,
&quot;cgroups&quot; exige <ulink
url="https://sourceforge.net/projects/libcg/">libcgroup</ulink>.</phrase>
<phrase revision="systemd"> Isso pode ser conseguido usando o comando
&quot;<command>systemd-run</command>&quot; com as opções &quot;<parameter>-p
User=$(whoami)</parameter>&quot; e &quot;<parameter>-p
AllowedCPUs=0-<replaceable>x</replaceable></parameter>&quot; (com
&quot;<replaceable>x</replaceable>&quot; substituído pelo número de núcleos
de &quot;CPU&quot; que você deseja usar menos um).</phrase>
    </para>

    <para>
      No momento, &quot;<application>Rust</application>&quot; não oferece nenhuma
garantia de uma &quot;ABI&quot; estável.
    </para>

    <note>
      <para>
        O padrão do &quot;Rustc&quot; é o de construir para TODAS as arquiteturas
suportadas, usando uma cópia enviada do &quot;LLVM&quot;. No BLFS a
construção é somente para a arquitetura &quot;X86&quot;. Se você pretende
desenvolver caixas &quot;Rust&quot;, [então] essa construção possivelmente
não seja boa o suficiente para os teus propósitos.
      </para>
      <para>
        Os tempos de construção dessa versão, quando repetidos na mesma máquina,
costumam ser razoavelmente consistentes, mas como acontece com todas as
compilações usando &quot;<command>rustc</command>&quot;, pode existir alguns
valores discrepantes muito lentos.
      </para>
    </note>

    &lfs120_checked;

    <bridgehead renderas="sect3">Informação do Pacote</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência (HTTP): <ulink url="&rust-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Transferência (FTP): <ulink url="&rust-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &rust-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &rust-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &rust-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Tempo de construção estimado: &rust-time;
        </para>
      </listitem>
    </itemizedlist>



    <!--<bridgehead renderas="sect3">
Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&patch-root;/rustc-&rust-version;-llvm9_fixes-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>-->
<bridgehead renderas="sect3">Dependências do <quote>Rust</quote></bridgehead>

    <bridgehead renderas="sect4">Exigidas</bridgehead>
    <para role="required">
      <!-- Required for downloading stage 0 binaries.
           Otherwise it's recommended (if not installed, a vendored copy
           will be built). -->
<xref linkend="cmake"/> and <xref linkend="curl"/>
    </para>

    &build-use-internet;

    <bridgehead renderas="sect4">Recomendadas</bridgehead>
    <para role="recommended">
      <xref linkend="libssh2"/> and <xref linkend="llvm"/> (built with
-DLLVM_LINK_LLVM_DYLIB=ON so that rust can link to system LLVM instead of
building its shipped version)
    </para>

    <note>
      <para>
        Se uma dependência recomendada não estiver instalada, [então] uma cópia
enviada no &quot;tarball&quot; do fonte do &quot;Rustc&quot; será construída
e usada.
      </para>
    </note>

    <bridgehead renderas="sect4">Opcionais</bridgehead>
    <para role="optional">
      <xref linkend="gdb"/> (used by the test suite if it is present), <xref
linkend="git"/> (required by the test suite), and <ulink
url='https://libgit2.org/'>libgit2</ulink>
    </para>

    <para condition="html" role="usernotes">
      Editor Notes: <ulink url="&blfs-wiki;/rust"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Instalação do <quote>Rust</quote></title>

    <note>
      <para>
        Currently the rust compiler produces SSE2 instructions for 32-bit x86,
causing the generated code to be broken on 32-bit systems without a
SSE2-capable processor.  All x86 processor models released after 2004 should
be SSE2-capable.  Run <command>lscpu | grep sse2</command> as a test.  If it
outputs anything, your CPU is SSE2-capable and OK.  Otherwise you may try to
build this package <emphasis>on a SSE2-capable system</emphasis> with the
following fix applied:
      </para>

      
<screen role="nodump"><!-- computeroutput used deliberately to stop anyone from copying
           blindly -->
<computeroutput>sed 's@pentium4@pentiumpro@' -i \
   compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs</computeroutput></screen>

      <para>
        E copie o &quot;<filename
class="directory">/opt/rustc-&rust-version;</filename>&quot; resultante para
o sistema sem capacidade &quot;SSE2&quot;. Mas, essa mudança ainda está sob
revisão do(a) desenvolvedor(a) e não foi testada pelos(as) editores(as) do
BLFS.
      </para>
    </note>

    <para>
      Para instalar no diretório &quot;<filename
class="directory">/opt</filename>&quot;, remova qualquer link simbólico
&quot;<filename>/opt/rustc</filename>&quot; existente e crie um novo
diretório (ou seja, com um nome diferente se tentar uma construção
modificada da mesma versão). Como o(a) usuário(a) &quot;<systemitem
class="username">root</systemitem>&quot;:
    </para>

<screen role="root"><userinput>mkdir -pv /opt/rustc-&rust-version;     &amp;&amp;
ln -svfn rustc-&rust-version; /opt/rustc</userinput></screen>

    <note>
      <para>
        Se múltiplas versões do &quot;<application>Rust</application>&quot;
estiverem instaladas em &quot;<filename
class="directory">/opt</filename>&quot;, [então] a mudança para outra versão
exige somente mudar o link simbólico
&quot;<filename>/opt/rustc</filename>&quot; e então executar
&quot;<command>ldconfig</command>&quot;.
      </para>
    </note>

    <para>
      Crie um arquivo &quot;<filename>config.toml</filename>&quot; adequado que
configurará a construção.
    </para>

<!--<para>

     Adapt rustc to allow it to build and function with the changes in LLVM-9:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../rustc-&rust-version;-llvm9_fixes-1.patch</userinput></screen>-->
<screen><userinput>cat &lt;&lt; EOF &gt; config.toml
<literal># see config.toml.example for more possible options
# See the 8.4 book for an old example using shipped LLVM
# e.g. if not installing clang, or using a version before 13.0

# tell x.py to not keep printing an annoying warning
changelog-seen = 2

[llvm]
# by default, rust will build for a myriad of architectures
targets = "X86"

# When using system llvm prefer shared libraries
link-shared = true

[build]
# omit docs to save time and space (default is to build them)
docs = false

# install extended tools: cargo, clippy, etc
extended = true

# Do not query new versions of dependencies online.
locked-deps = true

# Specify which extended tools (those from the default install).
tools = ["cargo", "clippy", "rustdoc", "rustfmt"]

# Use the source code shipped in the tarball for the dependencies.
# The combination of this and the "locked-deps" entry avoids downloading
# many crates from Internet, and makes the Rustc build more stable.
vendor = true

[install]
prefix = "/opt/rustc-&rust-version;"
docdir = "share/doc/rustc-&rust-version;"

[rust]
channel = "stable"
description = "for BLFS &version;"

# BLFS used to not install the FileCheck executable from llvm,
# so disabled codegen tests.  The assembly tests rely on FileCheck
# and cannot easily be disabled, so those will anyway fail if
# FileCheck has not been installed.
#codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# NB the output of llvm-config (i.e. help options) may be
# dumped to the screen when config.toml is parsed.
llvm-config = "/usr/bin/llvm-config"

</literal>
EOF</userinput></screen>



    <para>
      Compile &quot;<application>Rust</application>&quot; executando os seguintes
comandos:
    </para>



<screen><!-- fixed in 1.58.0, retain as a reminder that fixed crates can be used
<screen>
<userinput>sed -i -e '/^curl /s/0.4.38/0.4.40/' \
       -e '/^curl-sys /s/0.4.48/0.4.50/' \
       src/tools/cargo/Cargo.toml &amp;&amp; -->
<userinput>{ [ ! -e /usr/include/libssh2.h ] ||
  export LIBSSH2_SYS_USE_PKG_CONFIG=1; } &amp;&amp;
python3 ./x.py build</userinput></screen>

    <note>
      <para>
        A suíte de teste gerará algumas mensagens no <phrase
revision="sysv">registro do sistema</phrase> <phrase
revision="systemd">diário do systemd</phrase> para interceptações em códigos
inválidos de operação e para falhas de segmentação. Por si só, isso não é
motivo de preocupação, apenas uma maneira do teste ser terminado.
      </para>
    </note>

    <para>
      Para executar os testes (novamente usando todas as &quot;CPUs&quot;
disponíveis), emita:
    </para>

<!-- https://github.com/rust-lang/rust/issues/112209
         I only saw 2 failures with 1.71.1, but Rainer saw 6 ones.
         I don't want to find out the maximum number (by building rustc
         in somewhere like /a/very/long/long/long/.../long/path) so I'd
         just omit the exact number of failures here. -->
<screen remap="test"><userinput>SSL_CERT_DIR=/etc/ssl/certs \
python3 ./x.py test --verbose --no-fail-fast | tee rustc-testlog</userinput></screen>

    
    <para>
      Some <literal>ui</literal> tests may fail (the number of failures depends on
the length of the absolute path to the <filename
class='directory'>rustc-&rust-version;-src</filename> directory).  These
failures can be identified by viewing the <filename>rustc-testlog</filename>
file and search for the <computeroutput>note: the full type name has been
written to</computeroutput>... messages and they can be safely ignored.
    </para>

    <para>
      Se o &quot;<command>FileCheck</command>&quot; originário do
&quot;<application>LLVM</application>&quot; não tiver sido instalado,
[então] todos os quarenta e sete (47) testes da suíte
<quote>assembly</quote> falharão.
    </para>

    <para>
      On some systems, scripting the tests may result in the tests hanging on
<filename>test: combine_install_with_separate_uninstall</filename>. If this
happens, the problem can be worked around by pressing the Enter key.  The
test can also be removed with:
    </para>

<screen role="nodump"><userinput>sed -e '/runtest combine_install_with/s/^/#/g' -i src/tools/rust-installer/test.sh</userinput></screen>

    <para>
      As with all large test suites, other tests might fail on some machines - if
the number of additional failures is low, check the log for 'failures:' and
review lines above that, particularly the 'stderr:' lines. Any mention of
SIGSEGV or signal 11 in a failing test is a cause for concern.
    </para>

    <para>
      Se você receber algum <emphasis>outro</emphasis> teste falho que informe um
número de problema, então você deveria procurar por esse problema. Por
exemplo, quando &quot;Rustc&quot; &gt;= 1.41.1 era construído com uma versão
do &quot;LLVM&quot; do sistema anterior à 10.0, o teste para o problema
&quot;69225&quot; falhava <ulink
url="https://github.com/rust-lang/rust/issues/69225"/> e isso deveria ser
considerado como uma falha crítica (eles(as) lançaram 1.41.1 por causa
disso). A maioria das outras falhas não será crítica.
    </para>

    <para>
      Portanto, você deveria determinar o número de falhas.
    </para>

    <para>
      O número de testes que passaram e falharam pode ser encontrado executando:
    </para>


<screen remap="test"><!-- split into two lines for narrower screen windows -->
<userinput>grep '^test result:' rustc-testlog |
 awk '{sum1 += $4; sum2 += $6} END { print sum1 " passed; " sum2 " failed" }'</userinput></screen>

    <para>
      Os outros campos disponíveis são &quot;$8&quot; para aqueles que foram
ignorados (ou seja, pulados), &quot;$10&quot; para 'medido' e
&quot;$12&quot; para 'filtrado', mas ambos os dois últimos provavelmente
sejam zero.
    </para>

    <para>
      Agora, como o(a) usuário(a) &quot;&root;&quot;, instale o pacote:
    </para>

    <note>
      <para>
        If <command>sudo</command> or <command>su</command> is invoked for switching
to the &root; user, ensure <envar>LIBSSH2_SYS_USE_PKG_CONFIG</envar> is
correctly passed or the following command may completely rebuild this
package.  For <command>sudo</command>, use the
<option>--preserve-env=LIBSSH2_SYS_USE_PKG_CONFIG</option> option.  For
<command>su</command>, do <emphasis>not</emphasis> use the
<option>-</option> or <option>--login</option>.
      </para>
    </note>

<!-- TODO: Report to upstream if this persists in the next release -->
<screen role='root'><userinput>python3 ./x.py install</userinput></screen>

    
    <para>
      The building system attempts to install some files twice, and during the
second attempt it renames the old one (installed in the first attempt) with
the <filename class='extension'>.old</filename> suffix.  As the &root; user,
remove these files:
    </para>

    <screen role='root'><userinput>find /opt/rustc-&rust-version; -name "*.old" -delete</userinput></screen>

    <para>
      Still as the &root; user, symlink a <application>Zsh</application>
completion file into the correct location:
    </para>

<screen role='root'><userinput>install -vdm755 /usr/share/zsh/site-functions      &amp;&amp;
ln -sfv /opt/rustc/share/zsh/site-functions/_cargo \
        /usr/share/zsh/site-functions</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explicações do Comando</title>			

    <para>
      <command>ln -svfn rustc-&rust-version; /opt/rustc</command>: se esse não for
o primeiro uso do link simbólico <filename
class="directory">/opt/rustc</filename>, [então] sobrescreva-o forçando e
use o sinalizador '-n' para evitar resultados confusos oriundos, por
exemplo, de <command>ls -l</command>.
    </para>

    <para>
      <literal>targets = "X86"</literal>: this avoids building all the available
linux cross-compilers (AArch64, MIPS, PowerPC, SystemZ, etc). Unfortunately,
rust insists on installing source files for these below <filename
class="directory">/opt/rustc/lib/src</filename>.
    </para>

    <para>
      <literal>extended = true</literal>: this installs several tools (specified
by the <literal>tools</literal> entry) alongside <command>rustc</command>.
    </para>

    <para>
      <literal>tools = ["cargo", "clippy", "rustdoc", "rustfmt"]</literal>: only
build the tools from the 'default' profile in binary command
<command>rustup</command> which are recommended for most users.  The other
tools are unlikely to be useful unless using (old) code analyzers or editing
the standard library.
    </para>

    <para>
      <literal>channel = "stable"</literal>: this ensures only stable features can
be used, the default in <filename>config.toml</filename> is to use
development features, which is not appropriate for a released version.
    </para>

    
    <!-- comment while using shipped LLVM -->
<para>
      <literal>[target.x86_64-unknown-linux-gnu]</literal>: the syntax of
<filename>config.toml</filename> requires an <literal>llvm-config</literal>
entry for each target for which system-llvm is to be used. Change the target
to <literal>[target.i686-unknown-linux-gnu]</literal> if you are building on
32-bit x86. This whole section may be omitted if you wish to build against
the shipped llvm, or do not have clang, but the resulting build will be
larger and take longer.
    </para>



    
    <!--<para>

      <command>sed -i -e '/^curl /s/0.4.38/0.4.40/' ... </command>: two crates
      normally downloaded for this release do not correctly initialise
      <application>curl</application> if using
      <application>openssl-3.0.0</application>. Upstream has fixed that for a
      future release, this sed causes the fixed versions to be used.
    </para>-->
<!-- https://github.com/alexcrichton/ssh2-rs/issues/173 -->
<para>
      <command>export LIBSSH2_SYS_USE_PKG_CONFIG=1</command>: Permite que o
&quot;<command>cargo</command>&quot; se vincule à &quot;libssh2&quot; do
sistema.
    </para>



    
    <!--<para>

      <command>export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"</command>:
      This adds a link to libffi to any RUSTFLAGS you may already be passing
      to the build. On some systems, linking fails to include libffi unless
      this is used. The reason why this is needed is not clear.
      2023-01-14 : assumed to be no longer needed, but it is some years
      since one person reported needing this, keep it commented for the moment.
    </para>-->
<!-- https://github.com/alexcrichton/openssl-probe/issues/25 -->
<para>
      <envar>SSL_CERT_DIR=/etc/ssl/certs</envar>: Work around an issue causing
test failures with the CA certificate store layout used by <xref
linkend='make-ca'/>.
    </para>

    <para>
      <parameter>--verbose</parameter>: this switch can sometimes provide more
information about a test which fails.
    </para>

    <para>
      <parameter>--no-fail-fast</parameter>: this switch ensures that the test
suite will not stop at the first error.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Configurando <quote>Rust</quote></title>

    <sect3 id="rustc-config">
      <title>Informação de Configuração</title>

      <para>
        Se você instalou &quot;<application>rustc</application>&quot; em
&quot;<filename class="directory">/opt</filename>&quot;, [então] você
precisa atualizar os seguintes arquivos de configuração, de forma que
&quot;<application>rustc</application>&quot; seja encontrado corretamente
por outros pacotes e processos do sistema.
      </para>

      <para>
        Como o(a) usuário(a) &quot;<systemitem
class="username">root</systemitem>&quot;, crie o arquivo
&quot;<filename>/etc/profile.d/rustc.sh</filename>&quot;:
      </para>

<screen role="root"><userinput>cat &gt; /etc/profile.d/rustc.sh &lt;&lt; "EOF"
<literal># Inicia /etc/profile.d/rustc.sh

pathprepend /opt/rustc/bin           PATH

# Inclui "/opt/rustc/man" na variável "MANPATH" para acessar páginas de manual
pathappend  /opt/rustc/share/man     MANPATH

# Termina /etc/profile.d/rustc.sh</literal>
EOF</userinput></screen>

      <para>
        Imediatamente depois da instalação, atualize o &quot;PATH&quot; atual para o
seu &quot;shell&quot; atual como um(a) usuário(a) normal:
      </para>

<screen><userinput>source /etc/profile.d/rustc.sh</userinput></screen>

    </sect3>
  </sect2>


  <sect2 role="content">
    <title>Conteúdo</title>

    <segmentedlist>
      <segtitle>Aplicativos Instalados</segtitle>
      <segtitle>Bibliotecas Instaladas</segtitle>
      <segtitle>Diretórios Instalados</segtitle>

      <seglistitem>			
        <seg>
          cargo-clippy, cargo-fmt, cargo, clippy-driver, rust-gdb, rust-gdbgui,
rust-lldb, rustc, rustdoc e rustfmt
        </seg>
        <seg>
          librustc-driver-&lt;resumo_de_16_bytes&gt;.so,
libstd-&lt;resumo_de_16_bytes&gt;.so e libtest-&lt;resumo_de_16_bytes&gt;.so
        </seg>
        <seg>
          ~/.cargo, /opt/rustc, link simbólico para /opt/rustc-&rust-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descrições Curtas</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="cargo-clippy">
        <term><command>cargo-clippy</command></term>
        <listitem>
          <para>
            fornece verificações &quot;lint&quot; para um pacote &quot;cargo&quot;
          </para>
          <indexterm zone="rust cargo-clippy">
            <primary sortas="b-cargo-clippy">cargo-clippy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cargo-fmt">
        <term><command>cargo-fmt</command></term>
        <listitem>
          <para>
            formata todos os arquivos &quot;bin&quot; e &quot;lib&quot; da caixa atual
usando &quot;Rustfmt&quot;
          </para>
          <indexterm zone="rust cargo-fmt">
            <primary sortas="b-cargo-fmt">cargo-fmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>



      <!--  <varlistentry id="cargo-miri">

        <term><command>cargo-miri</command></term>
        <listitem>
          <para>
            is for use by Miri to interpret bin crates and tests. It is
            not installed by default.
          </para>
          <indexterm zone="rust cargo-miri">
            <primary sortas="b-cargo-miri">cargo-miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->
<varlistentry id="cargo">
        <term><command>cargo</command></term>
        <listitem>
          <para>
            é o Gerenciador de Pacote para &quot;Rust&quot;
          </para>
          <indexterm zone="rust cargo">
            <primary sortas="b-cargo">cargo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clippy-driver">
        <term><command>clippy-driver</command></term>
        <listitem>
          <para>
            fornece verificações &quot;lint&quot; para &quot;Rust&quot;
          </para>
          <indexterm zone="rust clippy-driver">
            <primary sortas="b-clippy-driver">clippy-driver</primary>
          </indexterm>
        </listitem>
      </varlistentry>



      <!--  <varlistentry id="miri">

        <term><command>miri</command></term>
        <listitem>
          <para>
            is an interpreter for Rust's mid-level intermediate representation
            (MIR). It is not installed by default.
          </para>
          <indexterm zone="rust miri">
            <primary sortas="b-miri">miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rls">
        <term><command>rls</command></term>
        <listitem>
          <para>
            is the Rust Language Server. This can run in the background to
            provide IDEs, editors, and other tools with information about Rust
            programs
          </para>
          <indexterm zone="rust rls">
            <primary sortas="b-rls">rls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-analyzer">
        <term><command>rust-analyzer</command></term>
        <listitem>
          <para>
            is an implementation of Language Server Protocol for the Rust
            programming language.
          </para>
          <indexterm zone="rust rust-analyzer">
            <primary sortas="b-rust-analyzer">rust-analyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-demangler">
        <term><command>rust-demangler</command></term>
        <listitem>
          <para>
            converts a list of Rust mangled symbols into a
            corresponding list of demangled symbols
          </para>
          <indexterm zone="rust rust-demangler">
            <primary sortas="b-rust-demangler">rust-demangler</primary>
          </indexterm>
        </listitem>
      </varlistentry> -->
<varlistentry id="rust-gdb">
        <term><command>rust-gdb</command></term>
        <listitem>
          <para>
            é um &quot;script&quot; envólucro para &quot;gdb&quot;, extraindo módulos de
impressão bonita do &quot;Python&quot; instalados em &quot;<filename
class="directory">/opt/rustc-&rust-version;/lib/rustlib/etc</filename>&quot;
          </para>
          <indexterm zone="rust rust-gdb">
            <primary sortas="b-rust-gdb">rust-gdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-gdbgui">
        <term><command>rust-gdbgui</command></term>
        <listitem>
          <para>
            é um &quot;script&quot; envólucro para uma estrutura gráfica de interação
direta com o(a) usuário(a) para &quot;gdb&quot; que executa em um navegador
          </para>
          <indexterm zone="rust rust-gdbgui">
            <primary sortas="b-rust-gdbgui">rust-gdbgui</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-lldb">
        <term><command>rust-lldb</command></term>
        <listitem>
          <para>
            é um &quot;script&quot; envólucro para &quot;LLDB&quot; (o depurador
&quot;LLVM&quot;) que extrai os módulos de impressão bonita do
&quot;Python&quot;
          </para>
          <indexterm zone="rust rust-lldb">
            <primary sortas="b-rust-lldb">rust=lldb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustc">
        <term><command>rustc</command></term>
        <listitem>
          <para>
            é o compilador &quot;rust&quot;
          </para>
          <indexterm zone="rust rustc">
            <primary sortas="b-rustc">rustc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustdoc">
        <term><command>rustdoc</command></term>
        <listitem>
          <para>
            gera documentação a partir do código fonte &quot;rust&quot;
          </para>
          <indexterm zone="rust rustdoc">
            <primary sortas="b-rustdoc">rustdoc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustfmt">
        <term><command>rustfmt</command></term>
        <listitem>
          <para>
            formata código &quot;rust&quot;
          </para>
          <indexterm zone="rust rustfmt">
            <primary sortas="b-rustfmt">rustfmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstd">
        <term><filename
class="libraryfile">libstd-&lt;resumo_de_16_bytes&gt;.so</filename></term>
        <listitem>
          <para>
            é a biblioteca padrão do &quot;Rust&quot;, a fundação do logiciário portável
&quot;Rust&quot;
          </para>
          <indexterm zone="rust libstd">
            <primary sortas="c-libstd">libstd-&lt;resumo_de_16_bytes&gt;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

</sect1>
