<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY rust-download-http "https://static.rust-lang.org/dist/rustc-&rust-version;-src.tar.xz">
  <!ENTITY rust-download-ftp  "">
  <!ENTITY rust-md5sum        "e5e47e53c52574ce89ea200e52819f81">
  <!ENTITY rust-size          "136 MB">
  <!ENTITY rust-buildsize     "8,5 GB (501 MB instalado); adicionar 7,5 GB se executar os testes">
  <!ENTITY rust-time          "13 UPC (incluindo o tempo de transferência; adicionar 16 UPC para os testes,
ambos usando paralelismo=4)">
]>

<sect1 id="rust" xreflabel="rustc-&rust-version;">
  <?dbhtml filename="rust.html"?>


  <title>Rustc-&rust-version;</title>

  <indexterm zone="rust">
    <primary sortas="a-rust">Rust</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introdução ao <quote>Rust</quote></title>
    <para>
      A linguagem de programação &quot;<application>Rust</application>&quot; foi
projetada para ser uma linguagem segura, simultânea e prática.
    </para>

    <para>
      Esse pacote é atualizado em um ciclo de lançamento de seis semanas. Por ser
um pacote tão grande e lento de construir, no momento exigido somente por
uns poucos pacotes neste livro, e particularmente porque as versões mais
recentes tendem a quebrar pacotes &quot;Mozilla&quot; mais antigos, os(as)
editores(as) do BLFS consideram que ele somente deveria ser atualizado
quando isso for necessário (seja para corrigir problemas ou para permitir a
construção de uma nova versão de um pacote).
    </para>

    <para>
      Tal como acontece com muitas outras linguagens de programação, o
&quot;Rustc&quot; (o compilador &quot;Rust&quot;) precisa de um binário a
partir do qual inicializar. Ele baixará um binário stage0 no início da
construção, de forma que você não consegue compilá-lo sem uma conexão com a
Internet.
    </para>

    <note>
      <para>
        Embora o BLFS normalmente instale em &quot;<filename
class="directory">/usr</filename>&quot;, quando você atualizar
posteriormente para uma versão mais recente do
&quot;<application>rust</application>&quot;, as bibliotecas antigas em
&quot;<filename class="directory">/usr/lib/rustlib</filename>&quot;
permanecerão, com vários &quot;hashes&quot; nos nomes delas, mas não serão
usáveis e desperdiçarão espaço. Os(As) editores(as) recomendam colocar os
arquivos no diretório &quot;<filename
class="directory">/opt</filename>&quot;. Em particular, se você tiver
motivos para reconstruir com uma configuração modificada (por exemplo,
usando o &quot;LLVM&quot; enviado após construir com &quot;LLVM&quot;
compartilhado, talvez para compilar caixas para arquiteturas que a
construção &quot;LLVM&quot; do BLFS não suporta), [então] é possível que a
instalação deixe um aplicativo quebrado
&quot;<command>cargo</command>&quot;. Em tal situação, remova a instalação
existente primeiro ou use um prefixo diferente, como
&quot;/opt/rustc-&rust-version;-build2&quot;.
      </para>

      <para>
        Se preferir, você pode, certamente, mudar o prefixo para &quot;<filename
class="directory">/usr</filename>&quot;.
      </para>
    </note>

    <para>
      O atual sistema de construção
&quot;<application>rustbuild</application>&quot; usará todos os
processadores, embora não escale bem e frequentemente retorne a usar apenas
um núcleo enquanto espera que uma biblioteca compile. No entanto, ele pode
ser limitado, principalmente a um número especificado de processadores, por
uma combinação de adicionar a chave &quot;<literal>--jobs
&lt;N&gt;</literal>&quot; (por exemplo, &quot;--jobs 4&quot; para limitar a
quatro processadores) em cada invocação de &quot;<command>python3
./x.py</command>&quot; <emphasis>e</emphasis> usar uma variável de ambiente
&quot;<envar>CARGO_BUILD_JOBS=&lt;N&gt;</envar>&quot;. No momento, isso não
é eficaz quando alguns dos testes &quot;rustc&quot; são executados.
    </para>

    <para>
      A versão atual da caixa &quot;num_cpus&quot; do &quot;Rust&quot; agora
reconhece que &quot;cgroups&quot; pode ser usado para restringir quais
processadores ele está autorizado a usar. Portanto, se sua máquina carece de
&quot;DRAM&quot; (normalmente, menos de dois (02) GB de &quot;DRAM&quot; por
núcleo), [então] isso pode ser uma alternativa para colocar &quot;CPUs&quot;
fora de linha. <phrase revision="sysv">Em sistemas &quot;sysv&quot;,
&quot;cgroups&quot; exige <ulink
url="https://sourceforge.net/projects/libcg/">libcgroup</ulink>.</phrase>
<phrase revision="systemd"> Isso pode ser conseguido usando o comando
&quot;<command>systemd-run</command>&quot; com as opções &quot;<parameter>-p
User=$(whoami)</parameter>&quot; e &quot;<parameter>-p
AllowedCPUs=0-<replaceable>x</replaceable></parameter>&quot; (com
&quot;<replaceable>x</replaceable>&quot; substituído pelo número de núcleos
de &quot;CPU&quot; que você deseja usar menos um).</phrase>
    </para>

    <para>
      No momento, &quot;<application>Rust</application>&quot; não oferece nenhuma
garantia de uma &quot;ABI&quot; estável.
    </para>

    <note>
      <para>
        O padrão do &quot;Rustc&quot; é o de construir para TODAS as arquiteturas
suportadas, usando uma cópia enviada do &quot;LLVM&quot;. No BLFS a
construção é somente para a arquitetura &quot;X86&quot;. Se você pretende
desenvolver caixas &quot;Rust&quot;, [então] essa construção possivelmente
não seja boa o suficiente para os teus propósitos.
      </para>
      <para>
        Os tempos de construção dessa versão, quando repetidos na mesma máquina,
costumam ser razoavelmente consistentes, mas como acontece com todas as
compilações usando &quot;<command>rustc</command>&quot;, pode existir alguns
valores discrepantes muito lentos.
      </para>
    </note>

    &lfs113_checked;

    <bridgehead renderas="sect3">Informação do Pacote</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência (HTTP): <ulink url="&rust-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Transferência (FTP): <ulink url="&rust-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &rust-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &rust-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &rust-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Tempo de construção estimado: &rust-time;
        </para>
      </listitem>
    </itemizedlist>



    <!--<bridgehead renderas="sect3">
Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&patch-root;/rustc-&rust-version;-llvm9_fixes-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>-->
<bridgehead renderas="sect3">Dependências do <quote>Rust</quote></bridgehead>

    <bridgehead renderas="sect4">Exigidas</bridgehead>
    <para role="required">
      <xref linkend="cmake"/>
    </para>

    <bridgehead renderas="sect4">Recomendadas</bridgehead>
    <para role="recommended">
      <xref linkend="curl"/>, <xref linkend="libssh2"/> e <xref linkend="llvm"/>
(construído com &quot;-DLLVM_LINK_LLVM_DYLIB=ON&quot; de forma que
&quot;Rust&quot; consiga vincular ao &quot;LLVM&quot; do sistema em vez de
construir a versão enviada dele)
    </para>

    <note>
      <para>
        Se uma dependência recomendada não estiver instalada, [então] uma cópia
enviada no &quot;tarball&quot; do fonte do &quot;Rustc&quot; será construída
e usada.
      </para>
    </note>

    <bridgehead renderas="sect4">Opcionais</bridgehead>
    <para role="optional">
      &quot;<xref linkend="gdb"/>&quot; (usado pela suíte de teste se estiver
presente) e &quot;<ulink url='https://libgit2.org/'>libgit2</ulink>&quot;
    </para>

    <para condition="html" role="usernotes">
      Observações de Usuário(a): <ulink url="&blfs-wiki;/rust"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Instalação do <quote>Rust</quote></title>

    <note>
      <para>
        Atualmente o compilador &quot;Rust&quot; produz instruções &quot;SSE2&quot;
para &quot;x86&quot; de 32 bits, fazendo com que o código gerado seja
quebrado em sistemas de 32 bits sem um processador compatível com
&quot;SSE2&quot;. Todos os modelos de processador &quot;x86&quot; lançados
após 2004 deveriam ser compatíveis com &quot;SSE2&quot;. Execute
&quot;<command>lscpu | grep sse2</command>&quot; como teste. Se gerar alguma
coisa, [então] tua &quot;CPU&quot; é compatível com &quot;SSE2&quot; e está
OK. Caso contrário, você pode tentar construir esse pacote <emphasis>em um
sistema compatível com &quot;SSE2&quot;</emphasis> com a seguinte correção
aplicada:
      </para>

      
<screen role="nodump"><!-- computeroutput used deliberately to stop anyone from copying
           blindly -->
<computeroutput>sed 's@pentium4@pentiumpro@' -i \
   compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs</computeroutput></screen>

      <para>
        E copie o &quot;<filename
class="directory">/opt/rustc-&rust-version;</filename>&quot; resultante para
o sistema sem capacidade &quot;SSE2&quot;. Mas, essa mudança ainda está sob
revisão do(a) desenvolvedor(a) e não foi testada pelos(as) editores(as) do
BLFS.
      </para>
    </note>

    <para>
      Para instalar no diretório &quot;<filename
class="directory">/opt</filename>&quot;, remova qualquer link simbólico
&quot;<filename>/opt/rustc</filename>&quot; existente e crie um novo
diretório (ou seja, com um nome diferente se tentar uma construção
modificada da mesma versão). Como o(a) usuário(a) &quot;<systemitem
class="username">root</systemitem>&quot;:
    </para>

<screen role="root"><userinput>mkdir -pv /opt/rustc-&rust-version;     &amp;&amp;
ln -svfn rustc-&rust-version; /opt/rustc</userinput></screen>

    <note>
      <para>
        Se múltiplas versões do &quot;<application>Rust</application>&quot;
estiverem instaladas em &quot;<filename
class="directory">/opt</filename>&quot;, [então] a mudança para outra versão
exige somente mudar o link simbólico
&quot;<filename>/opt/rustc</filename>&quot; e então executar
&quot;<command>ldconfig</command>&quot;.
      </para>
    </note>

    <para>
      Crie um arquivo &quot;<filename>config.toml</filename>&quot; adequado que
configurará a construção.
    </para>

<!--<para>

     Adapt rustc to allow it to build and function with the changes in LLVM-9:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../rustc-&rust-version;-llvm9_fixes-1.patch</userinput></screen>-->
<screen><userinput>cat &lt;&lt; EOF &gt; config.toml
<literal># Veja-se "config.toml.example" para mais opções possíveis
# Veja-se o livro 8.4 para um exemplo antigo usando "LLVM" enviado
# por exemplo, se não instalar "clang", ou usar uma versão anterior a 13.0

# Diz ao "x.py" para não permanecer imprimindo um aviso irritante
changelog-seen = 2

[llvm]
# por padrão, "rust" construirá para uma miríade de arquiteturas
targets = "X86"

# Quando usar o "LLVM" do sistema prefira bibliotecas compartilhadas
link-shared = true

[build]
# Omita os documentos para economizar tempo e espaço (padrão é para construí-los)
docs = false

# Instala ferramentas estendidas: cargo, clippy, etc
extended = true

# Não consulte novas versões de dependências online.
locked-deps = true

# Especifique quais ferramentas estendidas (aquelas oriundas da instalação padrão).
tools = ["cargo", "clippy", "rustfmt"]

# Use o código-fonte enviado no "tarball" para as dependências.
# A combinação disto e da entrada "locked-deps" evita baixar
# muitas caixas a partir da Internet, e torna a construção do "Rustc" mais estável.
vendor = true

[install]
prefix = "/opt/rustc-&rust-version;"
docdir = "share/doc/rustc-&rust-version;"

[rust]
channel = "stable"
description = "para BLFS &version;"

# BLFS costumava não instalar o executável "FileCheck" originário do "LLVM",
# de forma que desabilitava os testes "codegen". Os testes "assembly" dependem de "FileCheck"
# e não podem ser facilmente desabilitados, de forma que eles falharão de qualquer maneira se
# "FileCheck" não tiver sido instalado.
#codegen-tests = false

[target.x86_64-unknown-linux-gnu]
# Observe bem: a saída gerada do "llvm-config" (ou seja, opções de ajuda) pode ser
# despejada na tela quando "config.toml" é analisado.
llvm-config = "/usr/bin/llvm-config"

[target.i686-unknown-linux-gnu]
# Observe bem: a saída gerada do "llvm-config" (ou seja, opções de ajuda) pode ser
# despejada na tela quando "config.toml" é analisado.
llvm-config = "/usr/bin/llvm-config"

</literal>
EOF</userinput></screen>



    <para>
      Compile &quot;<application>Rust</application>&quot; executando os seguintes
comandos:
    </para>



<screen><!-- fixed in 1.58.0, retain as a reminder that fixed crates can be used
<screen>
<userinput>sed -i -e '/^curl /s/0.4.38/0.4.40/' \
       -e '/^curl-sys /s/0.4.48/0.4.50/' \
       src/tools/cargo/Cargo.toml &amp;&amp; -->
<userinput>{ [ ! -e /usr/include/libssh2.h ] ||
  export LIBSSH2_SYS_USE_PKG_CONFIG=1; } &amp;&amp;
python3 ./x.py build</userinput></screen>

    <note>
      <para>
        A suíte de teste gerará algumas mensagens no <phrase
revision="sysv">registro do sistema</phrase> <phrase
revision="systemd">diário do systemd</phrase> para interceptações em códigos
inválidos de operação e para falhas de segmentação. Por si só, isso não é
motivo de preocupação, apenas uma maneira do teste ser terminado.
      </para>
    </note>

    <para>
      Para executar os testes (novamente usando todas as &quot;CPUs&quot;
disponíveis), emita:
    </para>

<screen remap="test"><userinput>python3 ./x.py test --verbose --no-fail-fast | tee rustc-testlog</userinput></screen>

    <para>
      Se o &quot;<command>FileCheck</command>&quot; originário do
&quot;<application>LLVM</application>&quot; não tiver sido instalado,
[então] todos os quarenta e sete (47) testes da suíte
<quote>assembly</quote> falharão.
    </para>

    <para>
      Tal como acontece com todas as grandes suítes de teste, outros testes podem
falhar em algumas máquinas - se o número de falhas adicionais estiver na
casa de um dígito, [então] verifique se existem 'failures:' no registro e
revise as linhas acima, especialmente as linhas 'stderr:'. Qualquer menção
ao &quot;SIGSEGV&quot; ou ao sinal onze (11) em um teste falho é motivo de
preocupação.
    </para>

    <para>
      Se você receber algum <emphasis>outro</emphasis> teste falho que informe um
número de problema, então você deveria procurar por esse problema. Por
exemplo, quando &quot;Rustc&quot; &gt;= 1.41.1 era construído com uma versão
do &quot;LLVM&quot; do sistema anterior à 10.0, o teste para o problema
&quot;69225&quot; falhava <ulink
url="https://github.com/rust-lang/rust/issues/69225"/> e isso deveria ser
considerado como uma falha crítica (eles(as) lançaram 1.41.1 por causa
disso). A maioria das outras falhas não será crítica.
    </para>

    <para>
      Portanto, você deveria determinar o número de falhas.
    </para>

    <para>
      O número de testes que passaram e falharam pode ser encontrado executando:
    </para>


<screen remap="test"><!-- split into two lines for narrower screen windows -->
<userinput>grep '^test result:' rustc-testlog |
 awk '{sum1 += $4; sum2 += $6} END { print sum1 " passed; " sum2 " failed" }'</userinput></screen>

    <para>
      Os outros campos disponíveis são &quot;$8&quot; para aqueles que foram
ignorados (ou seja, pulados), &quot;$10&quot; para 'medido' e
&quot;$12&quot; para 'filtrado', mas ambos os dois últimos provavelmente
sejam zero.
    </para>

    <para>
      Agora, como o(a) usuário(a) &quot;&root;&quot;, instale o pacote:
    </para>

    <note>
      <para>
        Se &quot;<command>sudo</command>&quot; ou &quot;<command>su</command>&quot;
for invocado para comutar para o usuário &quot;&root;&quot;, garanta que
&quot;<envar>LIBSSH2_SYS_USE_PKG_CONFIG</envar>&quot; seja passada
corretamente ou o comando seguinte possivelmente reconstrua completamente
esse pacote. Para &quot;<command>sudo</command>&quot;, use a opção
&quot;<option>--preserve-env=LIBSSH2_SYS_USE_PKG_CONFIG</option>&quot;. Para
&quot;<command>su</command>&quot;, <emphasis>não</emphasis> use o
&quot;<option>-</option>&quot; ou o &quot;<option>--login</option>&quot;.
      </para>
    </note>

<screen role='root'><userinput>python3 ./x.py install</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explicações do Comando</title>			

    <para>
      <command>ln -svfn rustc-&rust-version; /opt/rustc</command>: se esse não for
o primeiro uso do link simbólico <filename
class="directory">/opt/rustc</filename>, [então] sobrescreva-o forçando e
use o sinalizador '-n' para evitar resultados confusos oriundos, por
exemplo, de <command>ls -l</command>.
    </para>

    <para>
      <command>targets = "X86"</command>: isso evita construir todos os
compiladores cruzados disponíveis do &quot;Linux&quot; (&quot;AArch64&quot;,
&quot;MIPS&quot;, &quot;PowerPC&quot;, &quot;SystemZ&quot;,
etc). Infelizmente, o &quot;Rust&quot; insiste em instalar os arquivos fonte
para esses abaixo de &quot;<filename
class="directory">/opt/rustc/lib/src</filename>&quot;.
    </para>

    <para>
      <command>extended = true</command>: isso instala várias ferramentas
(especificadas pela entrada &quot;<literal>tools</literal>&quot;) juntamente
com o &quot;<command>rustc</command>&quot;.
    </para>

    <para>
      <command>tools = ["cargo", "clippy", "rustfmt"]</command>: se as ferramentas
não forem especificadas, [então] a ausência de
<application>Miri</application> agora causa falha na instalação. Mas
<application>Miri</application> não é construído no canal estável. Algumas
das outras ferramentas são improváveis de serem úteis, a menos que se usem
analisadores (antigos) de código ou se edite a biblioteca padrão. Esse
conjunto corresponde àquelas originárias do perfil 'default' no comando
binário <command>rustup</command> que são recomendadas para a maioria dos
usuários, exceto que a documentação foi desabilitada no início da seção
'[build]'.
    </para>

    <para>
      <command>channel = "stable"</command>: isso garante que somente recursos
estáveis possam ser usados. O padrão no
&quot;<filename>config.toml</filename>&quot; é o de usar recursos de
desenvolvimento, o que não é apropriado para uma versão lançada.
    </para>

    
    <!-- comment while using shipped LLVM -->
<para>
      <command>[target.x86_64-unknown-linux-gnu]</command>: a sintaxe do
&quot;<filename>config.toml</filename>&quot; exige uma entrada
&quot;<literal>llvm-config</literal>&quot; para cada alvo para o qual o
&quot;LLVM&quot; do sistema seja para ser usado. Mude o alvo para
&quot;<literal>[target.i686-unknown-linux-gnu]</literal>&quot; se você
estiver construindo em &quot;x86&quot; de 32 bits. Essa seção inteira pode
ser omitida se você desejar construir contra o &quot;LLVM&quot; enviado ou
não tiver &quot;clang&quot;, mas a construção resultante será maior e
demorará mais.
    </para>



    
    <!--<para>

      <command>sed -i -e '/^curl /s/0.4.38/0.4.40/' ... </command>: two crates
      normally downloaded for this release do not correctly initialise
      <application>curl</application> if using
      <application>openssl-3.0.0</application>. Upstream has fixed that for a
      future release, this sed causes the fixed versions to be used.
    </para>-->
<!-- https://github.com/alexcrichton/ssh2-rs/issues/173 -->
<para>
      <command>export LIBSSH2_SYS_USE_PKG_CONFIG=1</command>: Permite que o
&quot;<command>cargo</command>&quot; se vincule à &quot;libssh2&quot; do
sistema.
    </para>



    <!--<para>

      <command>export RUSTFLAGS="$RUSTFLAGS -C link-args=-lffi"</command>:
      This adds a link to libffi to any RUSTFLAGS you may already be passing
      to the build. On some systems, linking fails to include libffi unless
      this is used. The reason why this is needed is not clear.
      2023-01-14 : assumed to be no longer needed, but it is some years
      since one person reported needing this, keep it commented for the moment.
    </para>-->
<para>
      <command>--verbose</command>: essa chave às vezes pode fornecer mais
informações relativas a um teste que falhe.
    </para>

    <para>
      <command>--no-fail-fast</command>: essa chave garante que a suíte de teste
não parará no primeiro erro.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Configurando <quote>Rust</quote></title>

    <sect3 id="rustc-config">
      <title>Informação de Configuração</title>

      <para>
        Se você instalou &quot;<application>rustc</application>&quot; em
&quot;<filename class="directory">/opt</filename>&quot;, [então] você
precisa atualizar os seguintes arquivos de configuração, de forma que
&quot;<application>rustc</application>&quot; seja encontrado corretamente
por outros pacotes e processos do sistema.
      </para>

      <para>
        Como o(a) usuário(a) &quot;<systemitem
class="username">root</systemitem>&quot;, crie o arquivo
&quot;<filename>/etc/profile.d/rustc.sh</filename>&quot;:
      </para>

<screen role="root"><userinput>cat &gt; /etc/profile.d/rustc.sh &lt;&lt; "EOF"
<literal># Inicia /etc/profile.d/rustc.sh

pathprepend /opt/rustc/bin           PATH

# Inclui "/opt/rustc/man" na variável "MANPATH" para acessar páginas de manual
pathappend  /opt/rustc/share/man     MANPATH

# Termina /etc/profile.d/rustc.sh</literal>
EOF</userinput></screen>

      <para>
        Imediatamente depois da instalação, atualize o &quot;PATH&quot; atual para o
seu &quot;shell&quot; atual como um(a) usuário(a) normal:
      </para>

<screen><userinput>source /etc/profile.d/rustc.sh</userinput></screen>

    </sect3>
  </sect2>


  <sect2 role="content">
    <title>Conteúdo</title>

    <segmentedlist>
      <segtitle>Aplicativos Instalados</segtitle>
      <segtitle>Bibliotecas Instaladas</segtitle>
      <segtitle>Diretórios Instalados</segtitle>

      <seglistitem>			
        <seg>
          cargo-clippy, cargo-fmt, cargo, clippy-driver, rust-gdb, rust-gdbgui,
rust-lldb, rustc, rustdoc e rustfmt
        </seg>
        <seg>
          librustc-driver-&lt;resumo_de_16_bytes&gt;.so,
libstd-&lt;resumo_de_16_bytes&gt;.so e libtest-&lt;resumo_de_16_bytes&gt;.so
        </seg>
        <seg>
          ~/.cargo, /opt/rustc, link simbólico para /opt/rustc-&rust-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descrições Curtas</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="cargo-clippy">
        <term><command>cargo-clippy</command></term>
        <listitem>
          <para>
            fornece verificações &quot;lint&quot; para um pacote &quot;cargo&quot;
          </para>
          <indexterm zone="rust cargo-clippy">
            <primary sortas="b-cargo-clippy">cargo-clippy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cargo-fmt">
        <term><command>cargo-fmt</command></term>
        <listitem>
          <para>
            formata todos os arquivos &quot;bin&quot; e &quot;lib&quot; da caixa atual
usando &quot;Rustfmt&quot;
          </para>
          <indexterm zone="rust cargo-fmt">
            <primary sortas="b-cargo-fmt">cargo-fmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>



      <!--  <varlistentry id="cargo-miri">

        <term><command>cargo-miri</command></term>
        <listitem>
          <para>
            is for use by Miri to interpret bin crates and tests. It is
            not installed by default.
          </para>
          <indexterm zone="rust cargo-miri">
            <primary sortas="b-cargo-miri">cargo-miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->
<varlistentry id="cargo">
        <term><command>cargo</command></term>
        <listitem>
          <para>
            é o Gerenciador de Pacote para &quot;Rust&quot;
          </para>
          <indexterm zone="rust cargo">
            <primary sortas="b-cargo">cargo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clippy-driver">
        <term><command>clippy-driver</command></term>
        <listitem>
          <para>
            fornece verificações &quot;lint&quot; para &quot;Rust&quot;
          </para>
          <indexterm zone="rust clippy-driver">
            <primary sortas="b-clippy-driver">clippy-driver</primary>
          </indexterm>
        </listitem>
      </varlistentry>



      <!--  <varlistentry id="miri">

        <term><command>miri</command></term>
        <listitem>
          <para>
            is an interpreter for Rust's mid-level intermediate representation
            (MIR). It is not installed by default.
          </para>
          <indexterm zone="rust miri">
            <primary sortas="b-miri">miri</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rls">
        <term><command>rls</command></term>
        <listitem>
          <para>
            is the Rust Language Server. This can run in the background to
            provide IDEs, editors, and other tools with information about Rust
            programs
          </para>
          <indexterm zone="rust rls">
            <primary sortas="b-rls">rls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-analyzer">
        <term><command>rust-analyzer</command></term>
        <listitem>
          <para>
            is an implementation of Language Server Protocol for the Rust
            programming language.
          </para>
          <indexterm zone="rust rust-analyzer">
            <primary sortas="b-rust-analyzer">rust-analyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-demangler">
        <term><command>rust-demangler</command></term>
        <listitem>
          <para>
            converts a list of Rust mangled symbols into a
            corresponding list of demangled symbols
          </para>
          <indexterm zone="rust rust-demangler">
            <primary sortas="b-rust-demangler">rust-demangler</primary>
          </indexterm>
        </listitem>
      </varlistentry> -->
<varlistentry id="rust-gdb">
        <term><command>rust-gdb</command></term>
        <listitem>
          <para>
            é um &quot;script&quot; envólucro para &quot;gdb&quot;, extraindo módulos de
impressão bonita do &quot;Python&quot; instalados em &quot;<filename
class="directory">/opt/rustc-&rust-version;/lib/rustlib/etc</filename>&quot;
          </para>
          <indexterm zone="rust rust-gdb">
            <primary sortas="b-rust-gdb">rust-gdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-gdbgui">
        <term><command>rust-gdbgui</command></term>
        <listitem>
          <para>
            é um &quot;script&quot; envólucro para uma estrutura gráfica de interação
direta com o(a) usuário(a) para &quot;gdb&quot; que executa em um navegador
          </para>
          <indexterm zone="rust rust-gdbgui">
            <primary sortas="b-rust-gdbgui">rust-gdbgui</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rust-lldb">
        <term><command>rust-lldb</command></term>
        <listitem>
          <para>
            é um &quot;script&quot; envólucro para &quot;LLDB&quot; (o depurador
&quot;LLVM&quot;) que extrai os módulos de impressão bonita do
&quot;Python&quot;
          </para>
          <indexterm zone="rust rust-lldb">
            <primary sortas="b-rust-lldb">rust=lldb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustc">
        <term><command>rustc</command></term>
        <listitem>
          <para>
            é o compilador &quot;rust&quot;
          </para>
          <indexterm zone="rust rustc">
            <primary sortas="b-rustc">rustc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustdoc">
        <term><command>rustdoc</command></term>
        <listitem>
          <para>
            gera documentação a partir do código fonte &quot;rust&quot;
          </para>
          <indexterm zone="rust rustdoc">
            <primary sortas="b-rustdoc">rustdoc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rustfmt">
        <term><command>rustfmt</command></term>
        <listitem>
          <para>
            formata código &quot;rust&quot;
          </para>
          <indexterm zone="rust rustfmt">
            <primary sortas="b-rustfmt">rustfmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstd">
        <term><filename
class="libraryfile">libstd-&lt;resumo_de_16_bytes&gt;.so</filename></term>
        <listitem>
          <para>
            é a biblioteca padrão do &quot;Rust&quot;, a fundação do logiciário portável
&quot;Rust&quot;
          </para>
          <indexterm zone="rust libstd">
            <primary sortas="c-libstd">libstd-&lt;resumo_de_16_bytes&gt;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

</sect1>
