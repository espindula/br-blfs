<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY llvm-url "https://github.com/llvm/llvm-project/releases/download/llvmorg-&llvm-version;">

  <!ENTITY llvm-download-http "&llvm-url;/llvm-&llvm-version;.src.tar.xz">
  <!ENTITY llvm-download-ftp  "">
  <!ENTITY llvm-md5sum        "d9185fc007c32aea27a6de3c7c1eb90d">
  <!ENTITY llvm-size          "54 MB">
  <!ENTITY llvm-buildsize     "3.1 GB (938 MB installed; add 20 GB for tests and 308 MB for documentation)">
  <!ENTITY llvm-time          "13 SBU (Add 8 SBU for tests; both using parallelism=8)">

  <!ENTITY clang-download-http "&llvm-url;/clang-&llvm-version;.src.tar.xz">
  <!ENTITY clang-md5sum        "cb3e79db62c4c3b78cfcdebe66b00268">
  <!ENTITY clang-size          "20 MB">

  <!ENTITY compiler-rt-download-http "&llvm-url;/compiler-rt-&llvm-version;.src.tar.xz">
  <!ENTITY compiler-rt-md5sum        "3061b4cb0b2428a32b4fb5db540fe66c">
  <!ENTITY compiler-rt-size          "2,3 MB">

  <!-- CMake modules and third party dependencies renamed and uploaded
       onto anduin to avoid stupid file names.  -->

  <!ENTITY cmake-llvm-download-http "&sources-anduin-http;/llvm/llvm-cmake.src.tar.xz">
  <!ENTITY cmake-llvm-md5sum         "356a1aff675d281d7c76165269d33bd5">
  <!ENTITY cmake-llvm-size           "9 KB">

  <!ENTITY llvm-3rdparty-download-http "&sources-anduin-http;/llvm/llvm-third-party.src.tar.xz">
  <!ENTITY llvm-3rdparty-md5sum        "8b506e49e5fa4c41186ba8ba7da5af82">
  <!ENTITY llvm-3rdparty-size          "376 KB">
]>

<sect1 id="llvm" xreflabel="LLVM-&llvm-version;">
  <?dbhtml filename="llvm.html" ?>


  <title>LLVM-&llvm-version;</title>

  <indexterm zone="llvm">
    <primary sortas="a-LLVM">LLVM</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introdução ao "LLVM"</title>

    <para>
      O pacote <application>LLVM</application> contém uma coleção de compiladores
modulares e reutilizáveis e tecnologias de conjunto de ferramentas. As
bibliotecas centrais "Low Level Virtual Machine" (LLVM) fornecem um
otimizador moderno independente de origem e destino, junto com suporte à
geração de código para muitas "CPUs" populares (bem como algumas menos
comuns!). Essas bibliotecas são construídas em torno de uma representação de
código bem especificada, conhecida como a representação intermediária LLVM
("LLVM IR").
    </para>

    <para>
      <application>Clang</application> fornece novas estruturas "C", "C++",
"Objective C" e "Objective C++" de interação direta com o(a) usuário(a) para
o <application>LLVM</application> e é exigido por alguns pacotes de área de
trabalho, como <application>firefox</application>, e para
<application>rust</application> se for construído usando o sistema
<application>LLVM</application>.
    </para>

    <para>
      O pacote <application>Compiler RT</application> fornece higienizador de
tempo de execução e bibliotecas de perfilamento para desenvolvedores(as) que
usam <application>Clang</application> e <application>LLVM</application>.
    </para>

    &lfs120_checked;

    <bridgehead renderas="sect3">Informação do Pacote</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência (HTTP): <ulink url="&llvm-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Transferência (FTP): <ulink url="&llvm-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &llvm-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &llvm-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &llvm-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Tempo de construção estimado: &llvm-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Transferências Adicionais</bridgehead>
    <para>
      <emphasis role="strong">módulos "Cmake" para o "LLVM"</emphasis>
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência: <ulink url="&cmake-llvm-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &cmake-llvm-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &cmake-llvm-size;
        </para>
      </listitem>
    </itemizedlist>

    <para>
      <emphasis role="strong">Third-party dependencies for LLVM build
system</emphasis>
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Download: <ulink url="&llvm-3rdparty-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &llvm-3rdparty-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size: &llvm-3rdparty-size;
        </para>
      </listitem>
    </itemizedlist>


    <bridgehead renderas="sect3">Transferência Recomendada</bridgehead>
    <para>
      <emphasis role="strong">Clang</emphasis>
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência: <ulink url="&clang-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &clang-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &clang-size;
        </para>
      </listitem>
    </itemizedlist>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Remendo habilitante do <xref linkend="gSSP"/> por padrão no "clang": <ulink
url="&patch-root;/clang-&llvm-version;-enable_default_ssp-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Transferência Opcional</bridgehead>
    <para>
      <emphasis role="strong">Compiler RT</emphasis>
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência: <ulink url="&compiler-rt-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &compiler-rt-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &compiler-rt-size;
        </para>
      </listitem>
    </itemizedlist>
    <bridgehead renderas="sect3">Dependências do "LLVM"</bridgehead>

    <bridgehead renderas="sect4">Exigidas</bridgehead>
    <para role="required">
      <xref linkend="cmake"/>
    </para>

    <bridgehead renderas="sect4">Opcionais</bridgehead>
    <para role="optional">
      <!-- for yaml2obj -->
<xref linkend="doxygen"/>, <xref linkend="git"/>, <xref
linkend="graphviz"/>, <xref linkend="libxml2"/>, <xref linkend="pygments"/>,
<xref linkend="rsync"/> (para testes), <xref linkend="recommonmark"/> (para
construir documentação), <xref linkend="texlive"/> (ou <xref
linkend="tl-installer"/>), <xref linkend="valgrind"/>, <xref
linkend="PyYAML"/>, <xref linkend="zip"/>, <ulink
url="https://ocaml.org/">OCaml</ulink>, <ulink
url="https://pypi.org/project/psutil/">psutil</ulink> (para testes) e <ulink
url="https://github.com/Z3Prover/z3">Z3</ulink>
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Instalação do "LLVM"</title>

    <para>
      Two additional tarballs <filename>llvm-cmake.src.tar.xz</filename> and
<filename>llvm-third-party.src.tar.xz</filename> are needed by LLVM building
system.  The upstream expects them extracted at the same level as the
<filename>llvm-&llvm-version;.src.tar.xz</filename> tarball, and the
extracted directories renamed to <filename
class="directory">cmake</filename> and <filename
class="directory">third-party</filename>.  Extract them and modify the build
system to avoid creating ambiguously-named directories outside the
<filename>llvm-&llvm-version;.src</filename> hierarchy:
    </para>

<screen><userinput>tar -xf ../llvm-cmake.src.tar.xz                                   &amp;&amp;
tar -xf ../llvm-third-party.src.tar.xz                             &amp;&amp;
sed '/LLVM_COMMON_CMAKE_UTILS/s@../cmake@llvm-cmake.src@'          \
    -i CMakeLists.txt                                              &amp;&amp;
sed '/LLVM_THIRD_PARTY_DIR/s@../third-party@llvm-third-party.src@' \
    -i cmake/modules/HandleLLVMOptions.cmake</userinput></screen>

    <para>
      Instale o <application>clang</application> na árvore do fonte executando os
seguintes comandos:
    </para>

<screen><userinput>tar -xf ../clang-&llvm-version;.src.tar.xz -C tools &amp;&amp;
mv tools/clang-&llvm-version;.src tools/clang</userinput></screen>

    <para>
      Se você tiver baixado o <application>compiler-rt</application>, [então]
instale-o na árvore do fonte executando os seguintes comandos:
    </para>

<screen><userinput>tar -xf ../compiler-rt-&llvm-version;.src.tar.xz -C projects &amp;&amp;
mv projects/compiler-rt-&llvm-version;.src projects/compiler-rt</userinput></screen>

    <para>
     Existem muitos scripts "Python" nesse pacote que usam <command>/usr/bin/env
python</command> para acessar o "Python" do sistema, que no LFS é <xref
linkend="python3"/>. Use o seguinte comando para corrigir esses scripts:
    </para>

<screen><userinput>grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'</userinput></screen>

    <para>
      Se você tiver baixado o <application>clang</application>, [então] aplique o
seguinte remendo para habilitar <xref linkend="gSSP"/> por padrão em
aplicativos compilados.
    </para>

<screen><!-- need <../<patch>
 instead of -i because -d changes directory
     before applying -i -->
<userinput remap="pre">patch -Np2 -d tools/clang &lt;../clang-&llvm-version;-enable_default_ssp-1.patch</userinput></screen>

    <para>
      If you have downloaded <application>compiler-rt</application>, fix a test
case broken by default SSP in <application>clang</application>:
    </para>

<screen><userinput remap="pre">sed 's/clang_dfsan/&amp; -fno-stack-protector/' \
    -i projects/compiler-rt/test/dfsan/origin_unaligned_memtrans.c</userinput></screen>

    <para>
      Instale <application>LLVM</application> executando os seguintes comandos:
    </para>

<screen><userinput>mkdir -v build &amp;&amp;
cd      build &amp;&amp;

CC=gcc CXX=g++                                  \
cmake -DCMAKE_INSTALL_PREFIX=/usr               \
      -DLLVM_ENABLE_FFI=ON                      \
      -DCMAKE_BUILD_TYPE=Release                \
      -DLLVM_BUILD_LLVM_DYLIB=ON                \
      -DLLVM_LINK_LLVM_DYLIB=ON                 \
      -DLLVM_ENABLE_RTTI=ON                     \
      -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
      -DLLVM_BINUTILS_INCDIR=/usr/include       \
      -DLLVM_INCLUDE_BENCHMARKS=OFF             \
      -DCLANG_DEFAULT_PIE_ON_LINUX=ON           \
      -Wno-dev -G Ninja ..                      &amp;&amp;
ninja</userinput></screen>

    <para>
      Se tiver instalado o <xref linkend="recommonmark"/> e as dependências dele,
[então] você consegue gerar a documentação "HTML" e as páginas de manual com
os seguintes comandos:
    </para>

<screen remap="doc"><userinput>cmake -DLLVM_BUILD_DOCS=ON           \
      -DLLVM_ENABLE_SPHINX=ON         \
      -DSPHINX_WARNINGS_AS_ERRORS=OFF \
      -Wno-dev -G Ninja ..            &amp;&amp;
ninja docs-llvm-html  docs-llvm-man</userinput></screen>

    <para>
      A documentação do "clang" pode ser construída também:
    </para>

<!-- The excessive core dump made my system irresponsive.  -->
<screen remap="doc"><userinput>ninja docs-clang-html docs-clang-man</userinput></screen>

    
    <para>
      LLVM test suite can produce many core dump files.  They will occupy a large
amount of disk space, and the core dump process can significantly slow down
the testing.  To test the results with core dump disabled, <phrase
revision='systemd'>ensure <xref linkend='systemd'/> is rebuilt with <xref
linkend='linux-pam'/> support and the current login session is started after
updating the <filename>/etc/pam.d/system-session</filename> file to include
<filename class='libraryfile'>pam_systemd.so</filename>, then
</phrase>issue:
    </para>

    <screen remap="test" revision="sysv"><userinput>sh -c 'ulimit -c 0 &amp;&amp; ninja check-all'</userinput></screen>

    

<screen remap="test" revision="systemd"><!-- From core(5): "RLIMIT_CORE will be ignored if the system is
         configured to pipe core dumps to a program".  Here "the program"
         is systemd-coredumpd.  So we need some fancy systemd setting.
         -&ndash;user: Run it under per-user systemd manager, avoiding
                       the necessity of root priviledge.
         -&nash;pty: Run it in a pseudo-terminal, so we can monitor the
                     process or interrupt it with Ctrl-C if we want.
         -d: Run it with $PWD as the working directory.
         -G: Delete the transient service unit even if the command fails,
             to prevent "systemctl -&ndash;user status" from reporting
             "degraded".
         -p LimitCORE=0: Disable core dump.
    -->
<userinput>systemctl   --user start dbus &amp;&amp;
systemd-run --user --pty -d -G -p LimitCORE=0 ninja check-all</userinput></screen>

    <para>
      
      <!-- EDITORS - if you have more than 4 cores, take some offline to measure
      the elapsed time for the tests.  Also, libstdc++.a and perhaps libstdc++fs.a
      are used by a couple of the link-static tests. -->
<!-- https://github.com/llvm/llvm-project/issues/64388 -->
<!-- 16.0.3: 67327 Passed, 23510 Unsupported, 85 Skipped,
                   124 Expectedly Failed
           16.0.4  67327 Passed, 23507 Unsupported, 85 Skipped,
                   124 Expectedly Failed, 6 Failed
           Failed Tests (6):
           AddressSanitizer-x86_64-linux         :: TestCases/log-path_test.cpp
           AddressSanitizer-x86_64-linux-dynamic :: TestCases/log-path_test.cpp
           MemProfiler-x86_64-linux              :: TestCases/log_path_test.cpp
           MemProfiler-x86_64-linux-dynamic      :: TestCases/log_path_test.cpp
           LLVM                   :: tools/llvm-libtool-darwin/L-and-l.test
           ThreadSanitizer-x86_64 :: Linux/clone_setns.cpp

           16.0.5 had the same test failures as 16.0.4.  - bdubbs

           16.0.5 in LFS r11.3-141 with a minimal kernel configuration:
           67330 Passed, 23512 Unsupported, 85 Skipped,
           124 Expectedly Failed, 1 Failed
           FAIL: ThreadSanitizer-x86_64 :: Linux/clone_setns.cpp - xry111

           16.0.5 with Glibc-2.38:
           63716 Passed, 23512 Unsupported, 85 Skipped,
           124 Expectedly Failed, 15 Failed

           - AtoiAndFriendsOOBTest, StrtolOOBTest, StrtollOOBTest
             (repeated 4 times with different configurations)
           - interception_malloc_test.cpp (repeated 2 times)
           - scanf-allocate.cpp
      -->
<!-- To editors: it seems there is a more thorough test suite named
           "test-suite-16.0.0.src.tar.xz" on the GitHub release download
           page.  The usage of it is on
           https://llvm.org/docs/TestSuiteGuide.html.  It looks like we've
           never mentioned it in BLFS.

           Let's let it go.  llvm is complex enough as it is.  Adding
           the additional testsuite is IMO overkill.  - bdubbs -->
Tests are built with all <emphasis>available</emphasis> cores, but run using
the number of <emphasis>online</emphasis> processors. (The difference is
that available cores can be limited using <command>taskset</command>, but
taking them offline requires echoing 0 to <filename
class="directory">/sys/devices/system/cpu/cpu&lt;N&gt;/online</filename> by
the <systemitem class="username">root</systemitem> user and makes them
temporarily unusable by all jobs on the machine.)  One test named
<filename>Linux/clone_setns.cpp</filename> will fail if
<option>CONFIG_USER_NS</option> is not enabled in kernel configuration.  The
tests named <filename>AtoiAndFriendsOOBTest</filename>,
<filename>StrtolOOBTest</filename>, <filename>StrtollOOBTest</filename>,
<filename>interception_malloc_test.cpp</filename>, and
<filename>scanf-allocate.cpp</filename> are known to fail with Glibc-2.38.
      

      
    </para>

    <para>
      Agora, como o(a) usuário(a) &root;:
    </para>

<!-- as of version 13.0.0, the install process seems to install the html
     documentation and the manual pages. The llvm html documentation
     is installed into /usr/share/doc/LLVM/llvm, while the clang html
     documentation is installed into /usr/share/doc/LLVM/clang. So we have
     just to move it. -->
<screen role="root"><userinput>ninja install &amp;&amp;
cp bin/FileCheck /usr/bin</userinput></screen>

    <para>
      Se você tiver construído a documentação do "llvm", [então] ela foi instalada
pelo comando acima, mas precisa ser movida. Como o(a) usuário(a) <systemitem
class="username">root</systemitem>:
    </para>

<screen role="root"
        remap="doc"><userinput>install -v -d -m755 /usr/share/doc/llvm-&llvm-version;           &amp;&amp;
mv -v /usr/share/doc/LLVM/llvm /usr/share/doc/llvm-&llvm-version; &amp;&amp;
rmdir -v --ignore-fail-on-non-empty /usr/share/doc/LLVM</userinput></screen>

    <para>
      Se você tiver construído a documentação do "clang", [então] ela foi
instalada, mas precisa ser movida também. Novamente como o(a) usuário(a)
<systemitem class="username">root</systemitem>:
    </para>

<screen role="root"
        remap="doc"><userinput>install -v -d -m755 /usr/share/doc/llvm-&llvm-version;            &amp;&amp;
mv -v /usr/share/doc/LLVM/clang /usr/share/doc/llvm-&llvm-version; &amp;&amp;
rmdir -v --ignore-fail-on-non-empty /usr/share/doc/LLVM</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explicações do Comando</title>

    <para>
      <parameter>-DLLVM_ENABLE_FFI=ON</parameter>: Essa chave permite que o
<application>LLVM</application> use <application>libffi</application>.
    </para>

    <para>
      <parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter>: Essa chave constrói as
bibliotecas como estáticas e vincula todas elas em uma biblioteca
compartilhada exclusiva. Essa é a forma recomendada de construir uma
biblioteca compartilhada.
    </para>

    <para>
      <parameter>-DCMAKE_BUILD_TYPE=Release</parameter>: Essa chave habilita
otimizações do compilador para a finalidade de acelerar o código e reduzir o
tamanho dele. Também desabilita algumas verificações de compilação que não
são necessárias em um sistema de produção.
    </para>

    <para>
      <parameter>-DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF"</parameter>: Essa chave
habilita construir para o mesmo alvo que o anfitrião e também para a "GPU"
"r600" da "AMD" usada pelos controladores "r600" e "radeonsi" do "Mesa". O
alvo "BPF" é necessário para construir <xref linkend="v4l-utils"/>. O padrão
é todos os alvos. Você consegue usar uma lista separada por ponto e
vírgula. Os alvos válidos são: "host", "X86", "Sparc", "PowerPC", "ARM",
"AArch64", "Mips", "Hexagon", "Xcore", "M68K", "MSP430", "NVPTX", "SystemZ",
"AMDGPU", "BPF", "CppBackend" ou "all".
    </para>

    <para>
      <parameter>-DLLVM_LINK_LLVM_DYLIB=ON</parameter>: Usado em conjunção com
<parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter>, essa chave habilita
vincular as ferramentas à biblioteca compartilhada em vez das
estáticas. Reduz ligeiramente o tamanho delas e também garante que
"llvm-config" usará corretamente "libLLVM-&llvm-maj-version;.so".
    </para>

    <para>
      <parameter>-DLLVM_ENABLE_RTTI=ON</parameter>: Essa chave é usada para
construir "LLVM" com informações de tipo de tempo de execução. Isso é
necessário para construir <xref linkend="mesa"/>.
    </para>

    <para>
      <parameter>-DLLVM_BINUTILS_INCDIR=/usr/include</parameter>: Essa chave é
usada para informar ao sistema de construção o local dos cabeçalhos do
"binutils", que foram instalados no LFS. Isso permite a construção de
<filename class="libraryfile">LLVMgold.so</filename>, que é necessário para
construir aplicativos com <command>clang</command> e "Link Time
Optimization" ("LTO").
    </para>

    <para>
      <parameter>-DLLVM_INCLUDE_BENCHMARKS=OFF</parameter>: é usado para
desabilitar alvos de construção de geração para os referenciais do
"LLVM". Essa opção exige código adicional que não está disponível
atualmente.
    </para>

    <para>
      <parameter>-DCLANG_DEFAULT_PIE_ON_LINUX=ON</parameter>: torna a opção
<option>-fpie</option> o padrão ao compilar aplicativos. Junto com o recurso
<xref linkend="gASLR"/> habilitado no núcleo, isso derrota alguns tipos de
ataques baseados em esquemas conhecidos de memória.
    </para>

    <para>
      <option>-DBUILD_SHARED_LIBS=ON</option>: se usado em vez de
<parameter>-DLLVM_BUILD_LLVM_DYLIB=ON</parameter> e
<parameter>-DLLVM_LINK_LLVM_DYLIB=ON</parameter>, constrói todas as
bibliotecas <application>LLVM</application> (cerca de sessenta (60)) como
bibliotecas compartilhadas em vez de estáticas.
    </para>

    <para>
      <option>-DLLVM_ENABLE_DOXYGEN</option>: habilita a geração de documentação
"HTML" navegável se você tiver instalado <xref linkend="doxygen"/>. Você
deveria executar <command>make doxygen-html</command> depois e instalar a
documentação gerada manualmente.
    </para>

  </sect2>

  <sect2 role="content">
    <title>Conteúdo</title>

    <segmentedlist>
      <segtitle>Aplicativos Instalados</segtitle>
      <segtitle>Bibliotecas Instaladas</segtitle>
      <segtitle>Diretórios Instalados</segtitle>

      <seglistitem>
        <seg>
          amdgpu-arch, analyze-build, bugpoint, c-index-test, clang, clang++ (symlinks
to clang-&llvm-maj-version;), clang-&llvm-maj-version;, clang-check,
clang-cl, clang-cpp (last two symlinks to clang), clang-extdef-mapping,
clang-format, clang-linker-wrapper, clang-offload-bundler,
clang-offload-packager, clang-refactor, clang-rename, clang-repl,
clang-scan-deps, diagtool, dsymutil, FileCheck, git-clang-format, hmaptool,
intercept-build, llc, lli, llvm-addr2line (symlink to llvm-symbolizer),
llvm-ar, llvm-as, llvm-bcanalyzer, llvm-bitcode-strip (symlink to
llvm-objcopy), llvm-cat, llvm-cfi-verify, llvm-config, llvm-cov,
llvm-c-test, llvm-cvtres, llvm-cxxdump, llvm-cxxfilt, llvm-cxxmap,
llvm-debuginfo-analyzer, llvm-debuginfod, llvm-debuginfod-find, llvm-diff,
llvm-dis, llvm-dlltool (symlink to llvm-ar), llvm-dwarfdump, llvm-dwarfutil,
llvm-dwp, llvm-exegesis, llvm-extract, llvm-gsymutil, llvm-ifs,
llvm-install-name-tool (symlink to llvm-objcopy), llvm-jitlink, llvm-lib
(symlink to llvm-ar), llvm-libtool-darwin, llvm-link, llvm-lipo, llvm-lto,
llvm-lto2, llvm-mc, llvm-mca, llvm-ml, llvm-modextract, llvm-mt, llvm-nm,
llvm-objcopy, llvm-objdump, llvm-opt-report, llvm-otool (symlink to
llv-objdump), llvm-pdbutil, llvm-profdata, llvm-profgen, llvm-ranlib
(symlink to llvm-ar), llvm-rc, llvm-readelf (symlink to llvm-readobj),
llvm-readobj, llvm-reduce, llvm-remark-size-diff, llvm-remarkutil,
llvm-rtdyld, llvm-sim, llvm-size, llvm-split, llvm-stress, llvm-strings,
llvm-strip (symlink to llvm-objcopy), llvm-symbolizer, llvm-tapi-diff,
llvm-tblgen, llvm-tli-checker, llvm-undname, llvm-windres (symlink to
llvm-rc), llvm-xray, nvptx-arch, opt, sancov, sanstats, scan-build,
scan-build-py, scan-view, split-file, and verify-uselistorder
        </seg>
        <seg>
          libLLVM.so, libLLVM*.a (100 libraries), libLTO.so, libRemarks.so,
libclang.so, libclang-cpp.so, libclang*.a (42 libraries), and LLVMgold.so
        </seg>
        <seg>
          /usr/include/{clang,clang-c,llvm,llvm-c},
/usr/lib/{clang,cmake/{clang,llvm},libear,libscanbuild},
/usr/share/{clang,opt-viewer,scan-build,scan-view} e
/usr/share/doc/llvm-&llvm-version;
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descrições Curtas</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="amdgpu-arch">
        <term><command>amdgpu-arch</command></term>
        <listitem>
          <para>
            lists AMD GPUs installed; at runtime it needs <filename
class='libraryfile'>libhsa-runtime64.so</filename> which is not a part of
BLFS
          </para>
          <indexterm zone="llvm amdgpu-arch">
            <primary sortas="b-amdgpu-arch">amdgpu-arch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="analyze-build">
        <term><command>analyze-build</command></term>
        <listitem>
          <para>
            é uma ferramenta de análise estática
          </para>
          <indexterm zone="llvm analyze-build">
            <primary sortas="b-analyze-build">analyze-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bugpoint">
        <term><command>bugpoint</command></term>
        <listitem>
          <para>
            é a ferramenta automática de redução de casos de teste
          </para>
          <indexterm zone="llvm bugpoint">
            <primary sortas="b-bugpoint">bugpoint</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="c-index-test">
        <term><command>c-index-test</command></term>
        <listitem>
          <para>
            é usado para testar a "API" da "libclang" e demonstrar o uso dela
          </para>
          <indexterm zone="llvm c-index-test">
            <primary sortas="b-c-index-test">c-index-test</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang">
        <term><command>clang</command></term>
        <listitem>
          <para>
            é o compilador "C", "C++" e "Objective-C" do
<application>Clang</application>
          </para>
          <indexterm zone="llvm clang">
            <primary sortas="b-clang">clang</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-check">
        <term><command>clang-check</command></term>
        <listitem>
          <para>
            é uma ferramenta para realizar análise estática de código e exibir "Abstract
Syntax Trees" ("AST")
          </para>
          <indexterm zone="llvm clang-check">
            <primary sortas="b-clang-check">clang-check</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-extdef-mapping">
        <term><command>clang-extdef-mapping</command></term>
        <listitem>
          <para>
            é uma ferramenta para coletar o nome do "USR" e o local de definições
externas em um arquivo de fonte
          </para>
          <indexterm zone="llvm clang-extdef-mapping">
            <primary sortas="b-clang-extdef-mapping">clang-extdef-mapping</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-format">
        <term><command>clang-format</command></term>
        <listitem>
          <para>
            é uma ferramenta para formatar código
"C"/"C++"/"Java"/"JavaScript"/"Objective-C"/"Protobuf"
          </para>
          <indexterm zone="llvm clang-format">
            <primary sortas="b-clang-format">clang-format</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-linker-wrapper">
        <term><command>clang-linker-wrapper</command></term>
        <listitem>
          <para>
            é um utilitário envólucro sobre o vinculador de dispositivo
          </para>
          <indexterm zone="llvm clang-linker-wrapper">
            <primary sortas="b-clang-linker-wrapper">clang-linker-wrapper</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-offload-bundler">
        <term><command>clang-offload-bundler</command></term>
        <listitem>
          <para>
            é uma ferramenta para agrupar/desagrupar arquivos descarregados "OpenMP"
associados a um arquivo fonte comum
          </para>
          <indexterm zone="llvm clang-offload-bundler">
            <primary sortas="b-clang-offload-bundler">clang-offload-bundler</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-offload-packager">
        <term><command>clang-offload-packager</command></term>
        <listitem>
          <para>
            é uma ferramenta para agrupar vários arquivos de objeto em um binário, que
pode então ser usado para criar um binário que contenha código nativo para
várias arquiteturas de processador contendo código de descarregamento
          </para>
          <indexterm zone="llvm clang-offload-packager">
            <primary sortas="b-clang-offload-packager">clang-offload-packager</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-refactor">
        <term><command>clang-refactor</command></term>
        <listitem>
          <para>
            é uma ferramenta de refatoração baseada em "Clang" para "C", "C++" e
"Objective-C"
          </para>
          <indexterm zone="llvm clang-refactor">
            <primary sortas="b-clang-refactor">clang-refactor</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-rename">
        <term><command>clang-rename</command></term>
        <listitem>
          <para>
            é uma ferramenta para renomear símbolos em aplicativos "C"/"C++"
          </para>
          <indexterm zone="llvm clang-rename">
            <primary sortas="b-clang-rename">clang-rename</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clang-scan-deps">
        <term><command>clang-scan-deps</command></term>
        <listitem>
          <para>
            é uma ferramenta para escanear dependências em um arquivo fonte
          </para>
          <indexterm zone="llvm clang-scan-deps">
            <primary sortas="b-clang-scan-deps">clang-scan-deps</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="diagtool">
        <term><command>diagtool</command></term>
        <listitem>
          <para>
            é uma combinação de ferramentas para lidar com diagnósticos em "clang"
          </para>
          <indexterm zone="llvm diagtool">
            <primary sortas="b-diagtool">diagtool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="FileCheck">
        <term><command>FileCheck</command></term>
        <listitem>
          <para>
            é uma ferramenta que lê dois arquivos (um a partir da entrada padrão e outro
especificado na linha de comando) e usa um para verificar o outro.
          </para>
          <indexterm zone="llvm FileCheck">
            <primary sortas="b-FileCheck">FileCheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dsymutil">
        <term><command>dsymutil</command></term>
        <listitem>
          <para>
            é uma ferramenta usada para manipular arquivos de símbolos de depuração
"DWARF" arquivados, compatível com o comando <command>dsymutil</command> do
"Darwin"
          </para>
          <indexterm zone="llvm dsymutil">
            <primary sortas="b-dsymutil">dsymutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-clang-format">
        <term><command>git-clang-format</command></term>
        <listitem>
          <para>
            executa "clang-format" em remendos gerados pelo "git" (exige <xref
linkend="git"/>)
          </para>
          <indexterm zone="llvm git-clang-format">
            <primary sortas="b-git-clang-format">git-clang-format</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="hmaptool">
        <term><command>hmaptool</command></term>
        <listitem>
          <para>
            é uma ferramenta "Python" para despejar e construir mapas de cabeçalho
          </para>
          <indexterm zone="llvm hmaptool">
            <primary sortas="b-hmaptool">hmaptool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="intercept-build">
        <term><command>intercept-build</command></term>
        <listitem>
          <para>
            gera uma base de dados de comandos de construção para um projeto
          </para>
          <indexterm zone="llvm intercept-build">
            <primary sortas="b-intercept-build">intercept-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llc">
        <term><command>llc</command></term>
        <listitem>
          <para>
            é o compilador estático <application>LLVM</application>
          </para>
          <indexterm zone="llvm llc">
            <primary sortas="b-llc">llc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lli">
        <term><command>lli</command></term>
        <listitem>
          <para>
            é usado para executar aplicativos diretamente a partir do "bitcode" do
<application>LLVM</application>
          </para>
          <indexterm zone="llvm lli">
            <primary sortas="b-lli">lli</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-addr2line">
        <term><command>llvm-addr2line</command></term>
        <listitem>
          <para>
            é uma ferramenta usada para converter endereços em nomes de arquivos e
números de linha
          </para>
          <indexterm zone="llvm llvm-addr2line">
            <primary sortas="b-llvm-addr2line">llvm-addr2line</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-ar">
        <term><command>llvm-ar</command></term>
        <listitem>
          <para>
            é o arquivador do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-ar">
            <primary sortas="b-llvm-ar">llvm-ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-as">
        <term><command>llvm-as</command></term>
        <listitem>
          <para>
            é o montador do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-as">
            <primary sortas="b-llvm-as">llvm-as</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-bcanalyzer">
        <term><command>llvm-bcanalyzer</command></term>
        <listitem>
          <para>
            é o analizador de "bitcode" do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-bcanalyzer">
            <primary sortas="b-llvm-bcanalyzer">llvm-bcanalyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-bitcode-strip">
        <term><command>llvm-bitcode-strip</command></term>
        <listitem>
          <para>
            remove o "bitcode" de "LLVM" de um objeto
          </para>
          <indexterm zone="llvm llvm-bitcode-strip">
            <primary sortas="b-llvm-bitcode-strip">llvm-bitcode-strip</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cat">
        <term><command>llvm-cat</command></term>
        <listitem>
          <para>
            é uma ferramenta para concatenar módulos "llvm"
          </para>
          <indexterm zone="llvm llvm-cat">
            <primary sortas="b-llvm-cat">llvm-cat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cfi-verify">
        <term><command>llvm-cfi-verify</command></term>
        <listitem>
          <para>
            identifica se o "Control Flow Integrity" protege todas as instruções de
fluxo de controle indireto no arquivo de objeto fornecido, "DSO" ou binário
          </para>
          <indexterm zone="llvm llvm-cfi-verify">
            <primary sortas="b-llvm-cfi-verify">llvm-cfi-verify</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-config">
        <term><command>llvm-config</command></term>
        <listitem>
          <para>
            Imprime as opções de compilação do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-config">
            <primary sortas="b-llvm-config">llvm-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cov">
        <term><command>llvm-cov</command></term>
        <listitem>
          <para>
            é usado para emitir informações de cobertura
          </para>
          <indexterm zone="llvm llvm-cov">
            <primary sortas="b-llvm-cov">llvm-cov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-c-test">
        <term><command>llvm-c-test</command></term>
        <listitem>
          <para>
            é um desmontador de "bytecode"
          </para>
          <indexterm zone="llvm llvm-c-test">
            <primary sortas="b-llvm-c-test">llvm-c-test</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cvtres">
        <term><command>llvm-cvtres</command></term>
        <listitem>
          <para>
            é uma ferramenta para converter arquivos de recursos da Microsoft em "COFF"
          </para>
          <indexterm zone="llvm llvm-cvtres">
            <primary sortas="b-llvm-cvtres">llvm-cvtres</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cxxdump">
        <term><command>llvm-cxxdump</command></term>
        <listitem>
          <para>
            é usado como um Despejador de Dados de "ABI" da "C++"
          </para>
          <indexterm zone="llvm llvm-cxxdump">
            <primary sortas="b-llvm-cxxdump">llvm-cxxdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cxxfilt">
        <term><command>llvm-cxxfilt</command></term>
        <listitem>
          <para>
            é usado para desmontar símbolos "C++" no código "llvm"
          </para>
          <indexterm zone="llvm llvm-cxxfilt">
            <primary sortas="b-llvm-cxxfilt">llvm-cxxfilt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-cxxmap">
        <term><command>llvm-cxxmap</command></term>
        <listitem>
          <para>
            é usado para remapear símbolos mutilados da "C++"
          </para>
          <indexterm zone="llvm llvm-cxxmap">
            <primary sortas="b-llvm-cxxmap">llvm-cxxmap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-debuginfo-analyzer">
        <term><command>llvm-debuginfo-analyzer</command></term>
        <listitem>
          <para>
            prints a logical representation of low-level debug information
          </para>
          <indexterm zone="llvm llvm-debuginfo-analyzer">
            <primary sortas="b-llvm-debuginfo-analyzer">llvm-debuginfo-analyzer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-debuginfod">
        <term><command>llvm-debuginfod</command></term>
        <listitem>
          <para>
            é um serviço que fornece informações de depuração por meio de uma "API"
"HTTP" para analisar binários despojados
          </para>
          <indexterm zone="llvm llvm-debuginfod">
            <primary sortas="b-llvm-debuginfod">llvm-debuginfod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-debuginfod-find">
        <term><command>llvm-debuginfod-find</command></term>
        <listitem>
          <para>
            é uma interface para o processo de segundo plano
<command>llvm-debuginfod</command> para achar artefatos "debuginfod"
          </para>
          <indexterm zone="llvm llvm-debuginfod-find">
            <primary sortas="b-llvm-debuginfod-find">llvm-debuginfod-find</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-diff">
        <term><command>llvm-diff</command></term>
        <listitem>
          <para>
            é o '<command>diff</command>' estrutural do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-diff">
            <primary sortas="b-llvm-diff">llvm-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dis">
        <term><command>llvm-dis</command></term>
        <listitem>
          <para>
            é o desmontador do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-dis">
            <primary sortas="b-llvm-dis">llvm-dis</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dwarfdump">
        <term><command>llvm-dwarfdump</command></term>
        <listitem>
          <para>
            imprime o conteúdo das seções "DWARF" em arquivos objeto
          </para>
          <indexterm zone="llvm llvm-dwarfdump">
            <primary sortas="b-llvm-dwarfdump">llvm-dwarfdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dwarfutil">
        <term><command>llvm-dwarfutil</command></term>
        <listitem>
          <para>
            é uma ferramenta para copiar e manipular informações de depuração
          </para>
          <indexterm zone="llvm llvm-dwarfutil">
            <primary sortas="b-llvm-dwarfutil">llvm-dwarfutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-dwp">
        <term><command>llvm-dwp</command></term>
        <listitem>
          <para>
            mescla arquivos divididos "DWARF"
          </para>
          <indexterm zone="llvm llvm-dwp">
            <primary sortas="b-llvm-dwp">llvm-dwp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-elfabi">
        <term><command>llvm-elfabi</command></term>
        <listitem>
          <para>
            é usado para ler informações relativas a uma "ABI" de um binário "ELF"
          </para>
          <indexterm zone="llvm llvm-elfabi">
            <primary sortas="b-llvm-elfabi">llvm-elfabi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-exegesis">
        <term><command>llvm-exegesis</command></term>
        <listitem>
          <para>
            é uma ferramenta de comparação que usa informações disponíveis no "LLVM"
para medir características de instrução de máquina do dispositivo, como
latência ou decomposição de porta
          </para>
          <indexterm zone="llvm llvm-exegesis">
            <primary sortas="b-llvm-exegesis">llvm-exegesis</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-extract">
        <term><command>llvm-extract</command></term>
        <listitem>
          <para>
            é usado para extrair uma função a partir de um módulo do
<application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-extract">
            <primary sortas="b-llvm-extract">llvm-extract</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-gsymutil">
        <term><command>llvm-gsymutil</command></term>
        <listitem>
          <para>
            é usado para processar arquivos no formato de simbolização "GSYM" que
convertem endereços de memória para nome de função e linha de arquivo
fonte. Esses arquivos são menores que os arquivos "DWARF" ou "Breakpad"
          </para>
          <indexterm zone="llvm llvm-gsymutil">
            <primary sortas="b-llvm-gsymutil">llvm-gsymutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-ifs">
        <term><command>llvm-ifs</command></term>
        <listitem>
          <para>
            é usado para mesclar "stubs" de interface com arquivos de objeto
          </para>
          <indexterm zone="llvm llvm-ifs">
            <primary sortas="b-llvm-ifs">llvm-ifs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-install-name-tool">
        <term><command>llvm-install-name-tool</command></term>
        <listitem>
          <para>
            é usado para reescrever comandos de carregamento no formato binário "MachO"
          </para>
          <indexterm zone="llvm llvm-install-name-tool">
            <primary sortas="b-llvm-install-name-tool">llvm-install-name-tool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-jitlink">
        <term><command>llvm-jitlink</command></term>
        <listitem>
          <para>
            é usado para analisar arquivos de objetos relocáveis para tornar o conteúdo
deles executável em um processo alvo
          </para>
          <indexterm zone="llvm llvm-jitlink">
            <primary sortas="b-llvm-jitlink">llvm-jitlink</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-libtool-darwin">
        <term><command>llvm-libtool-darwin</command></term>
        <listitem>
          <para>
            fornece funcionalidade básica da "libtool" em sistemas baseados em
"Darwin". Isso é útil principalmente se você estiver gerando binários para
sistemas "macOS"
          </para>
          <indexterm zone="llvm llvm-libtool-darwin">
            <primary sortas="b-llvm-libtool-darwin">llvm-libtool-darwin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-link">
        <term><command>llvm-link</command></term>
        <listitem>
          <para>
            é o vinculador do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-link">
            <primary sortas="b-llvm-link">llvm-link</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-lipo">
        <term><command>llvm-lipo</command></term>
        <listitem>
          <para>
            é usado para criar binários universais a partir de arquivos "MachO"
          </para>
          <indexterm zone="llvm llvm-lipo">
            <primary sortas="b-llvm-lipo">llvm-lipo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-lto">
        <term><command>llvm-lto</command></term>
        <listitem>
          <para>
            é o vinculador "Link Time Optimization" ("LTO") do
<application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-lto">
            <primary sortas="b-llvm-lto">llvm-lto</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-lto2">
        <term><command>llvm-lto2</command></term>
        <listitem>
          <para>
            é um equipamento de teste para a interface "LTO" baseada em resolução
          </para>
          <indexterm zone="llvm llvm-lto2">
            <primary sortas="b-llvm-lto2">llvm-lto2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-mc">
        <term><command>llvm-mc</command></term>
        <listitem>
          <para>
            é um montador/desmontador de código de máquina autônomo
          </para>
          <indexterm zone="llvm llvm-mc">
            <primary sortas="b-llvm-mc">llvm-mc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-mca">
        <term><command>llvm-mca</command></term>
        <listitem>
          <para>
            é uma ferramenta de análise de desempenho para medir estaticamente o
desempenho do código de máquina
          </para>
          <indexterm zone="llvm llvm-mca">
            <primary sortas="b-llvm-mca">llvm-mca</primary>
          </indexterm>
        </listitem>
      </varlistentry>



      <!--  <varlistentry id="llvm-mcmarkup">

        <term><command>llvm-mcmarkup</command></term>
        <listitem>
          <para>
            is a parser for machine code markup.
          </para>
          <indexterm zone="llvm llvm-mcmarkup">
            <primary sortas="b-llvm-mcmarkup">llvm-mcmarkup</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->
<varlistentry id="llvm-ml">
        <term><command>llvm-ml</command></term>
        <listitem>
          <para>
            é um área de recreação para código de máquina fornecido pelo "LLVM"
          </para>
          <indexterm zone="llvm llvm-ml">
            <primary sortas="b-llvm-ml">llvm-ml</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-modextract">
        <term><command>llvm-modextract</command></term>
        <listitem>
          <para>
            é uma ferramenta para extrair um módulo a partir de arquivos "bitcode"
multimódulos
          </para>
          <indexterm zone="llvm llvm-modextract">
            <primary sortas="b-llvm-modextract">llvm-modextract</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-mt">
        <term><command>llvm-mt</command></term>
        <listitem>
          <para>
            é uma ferramenta para gerar arquivos e catálogos assinados a partir de um
manifesto de montagem lado a lado (usado para "SDK" da Microsoft)
          </para>
          <indexterm zone="llvm llvm-mt">
            <primary sortas="b-llvm-mt">llvm-mt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-nm">
        <term><command>llvm-nm</command></term>
        <listitem>
          <para>
            é usado para listar o "bitcode" do <application>LLVM</application> e a
tabela de símbolos do arquivo objeto
          </para>
          <indexterm zone="llvm llvm-nm">
            <primary sortas="b-llvm-nm">llvm-nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-objcopy">
        <term><command>llvm-objcopy</command></term>
        <listitem>
          <para>
            é a versão do "LLVM" de uma ferramenta "objcopy"
          </para>
          <indexterm zone="llvm llvm-objcopy">
            <primary sortas="b-llvm-objcopy">llvm-objcopy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-objdump">
        <term><command>llvm-objdump</command></term>
        <listitem>
          <para>
            é um despejador de arquivo objeto do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-objdump">
            <primary sortas="b-llvm-objdump">llvm-objdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-opt-report">
        <term><command>llvm-opt-report</command></term>
        <listitem>
          <para>
            é uma ferramenta para gerar um informe de otimização a partir de arquivos de
registro de otimização "YAML"
          </para>
          <indexterm zone="llvm llvm-opt-report">
            <primary sortas="b-llvm-opt-report">llvm-opt-report</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-pdbutil">
        <term><command>llvm-pdbutil</command></term>
        <listitem>
          <para>
            é um despejador "Program Database" ("PDB"). "PDB" é um formato da Microsoft
          </para>
          <indexterm zone="llvm llvm-pdbutil">
            <primary sortas="b-llvm-pdbutil">llvm-pdbutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-profdata">
        <term><command>llvm-profdata</command></term>
        <listitem>
          <para>
            é uma pequena ferramenta para manipular e imprimir arquivos de dados de
perfil
          </para>
          <indexterm zone="llvm llvm-profdata">
            <primary sortas="b-llvm-profdata">llvm-profdata</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-profgen">
        <term><command>llvm-profgen</command></term>
        <listitem>
          <para>
            gera informações de perfil "SPGO" do "LLVM"
          </para>
          <indexterm zone="llvm llvm-profgen">
            <primary sortas="b-llvm-profgen">llvm-profgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-ranlib">
        <term><command>llvm-ranlib</command></term>
        <listitem>
          <para>
            é usado para gerar um índice para um arquivamento do
<application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-ranlib">
            <primary sortas="b-llvm-ranlib">llvm-ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-rc">
        <term><command>llvm-rc</command></term>
        <listitem>
          <para>
            é uma ferramenta independente de plataforma para compilar scripts de
recursos em arquivos de recursos de binários
          </para>
          <indexterm zone="llvm llvm-rc">
            <primary sortas="b-llvm-rc">llvm-rc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-readobj">
        <term><command>llvm-readobj</command></term>
        <listitem>
          <para>
            exibe informações específicas de formato de baixo nível relativas a arquivos
de objeto
          </para>
          <indexterm zone="llvm llvm-readobj">
            <primary sortas="b-llvm-readobj">llvm-readobj</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-reduce">
        <term><command>llvm-reduce</command></term>
        <listitem>
          <para>
            é usado para reduzir automaticamente os casos de teste ao executar uma suíte
de teste
          </para>
          <indexterm zone="llvm llvm-reduce">
            <primary sortas="b-llvm-reduce">llvm-reduce</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-remark-size-diff">
        <term><command>llvm-remark-size-diff</command></term>
        <listitem>
          <para>
            informa a diferença na contagem de instruções e nas observações do tamanho
da pilha entre dois arquivos de observações
          </para>
          <indexterm zone="llvm llvm-remark-size-diff">
            <primary sortas="b-llvm-remark-size-diff">llvm-remark-size-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-remarkutil">
        <term><command>llvm-remarkutil</command></term>
        <listitem>
          <para>
            converts remark files between bitstream and YAML; or prints function
instruction count information in remark files
          </para>
          <indexterm zone="llvm llvm-remark-size-diff">
            <primary sortas="b-llvm-remark-size-diff">llvm-remark-size-diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-rtdyld">
        <term><command>llvm-rtdyld</command></term>
        <listitem>
          <para>
            é a ferramenta "MC-JIT" do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-rtdyld">
            <primary sortas="b-llvm-rtdyld">llvm-rtdyld</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-size">
        <term><command>llvm-size</command></term>
        <listitem>
          <para>
            é o despejador de tamanho de objeto do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-size">
            <primary sortas="b-llvm-size">llvm-size</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-split">
        <term><command>llvm-split</command></term>
        <listitem>
          <para>
            é o divisor de módulo do <application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-split">
            <primary sortas="b-llvm-split">llvm-split</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-stress">
        <term><command>llvm-stress</command></term>
        <listitem>
          <para>
            é usado para gerar arquivos aleatórios <filename
class="extension">.ll</filename>
          </para>
          <indexterm zone="llvm llvm-stress">
            <primary sortas="b-llvm-stress">llvm-stress</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-strings">
        <term><command>llvm-strings</command></term>
        <listitem>
          <para>
            imprime sequências de caracteres encontradas em um binário (arquivo objeto,
executável ou biblioteca de arquivamento)
          </para>
          <indexterm zone="llvm llvm-strings">
            <primary sortas="b-llvm-strings">llvm-strings</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-symbolizer">
        <term><command>llvm-symbolizer</command></term>
        <listitem>
          <para>
            converte endereços em locais de código-fonte
          </para>
          <indexterm zone="llvm llvm-symbolizer">
            <primary sortas="b-llvm-symbolizer">llvm-symbolizer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-tblgen">
        <term><command>llvm-tblgen</command></term>
        <listitem>
          <para>
            é a descrição alvo do <application>LLVM</application> para o gerador de
código "C++"
          </para>
          <indexterm zone="llvm llvm-tblgen">
            <primary sortas="b-llvm-tblgen">llvm-tblgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-tli-checker">
        <term><command>llvm-tli-checker</command></term>
        <listitem>
          <para>
            é o verificador "TargetLibraryInfo" versus "SDK" do
<application>LLVM</application>
          </para>
          <indexterm zone="llvm llvm-tli-checker">
            <primary sortas="b-llvm-tli-checker">llvm-tli-checker</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-undname">
        <term><command>llvm-undname</command></term>
        <listitem>
          <para>
            é uma ferramenta para desmantelar nomes
          </para>
          <indexterm zone="llvm llvm-undname">
            <primary sortas="b-llvm-undname">llvm-undname</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="llvm-xray">
        <term><command>llvm-xray</command></term>
        <listitem>
          <para>
            é uma implementação do sistema de rastreamento de chamadas de função "XRay"
do Google
          </para>
          <indexterm zone="llvm llvm-xray">
            <primary sortas="b-llvm-xray">llvm-xray</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvptx-arch">
        <term><command>nvptx-arch</command></term>
        <listitem>
          <para>
            lists NVIDIA GPUs installed; at runtime it needs <filename
class='libraryfile'>libcuda.so</filename> which is not a part of BLFS
          </para>
          <indexterm zone="llvm nvptx-arch">
            <primary sortas="b-nvptx-arch">nvptx-arch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="opt">
        <term><command>opt</command></term>
        <listitem>
          <para>
            é o otimizador do <application>LLVM</application>
          </para>
          <indexterm zone="llvm opt">
            <primary sortas="b-opt">opt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sancov">
        <term><command>sancov</command></term>
        <listitem>
          <para>
            é a ferramenta de processamento de cobertura de higienizador
          </para>
          <indexterm zone="llvm sancov">
            <primary sortas="b-sancov">sancov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sanstats">
        <term><command>sanstats</command></term>
        <listitem>
          <para>
            é a ferramenta de processamento de estatísticas de higienizador
          </para>
          <indexterm zone="llvm sanstats">
            <primary sortas="b-sanstats">sanstats</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scan-build">
        <term><command>scan-build</command></term>
        <listitem>
          <para>
            é um script <application>Perl</application> que invoca o analisador estático
<application>Clang</application>
          </para>
          <indexterm zone="llvm scan-build">
            <primary sortas="b-scan-build">scan-build</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scan-build-py">
        <term><command>scan-build-py</command></term>
        <listitem>
          <para>
            é um script <application>Python</application> que invoca o analisador
estático <application>Clang</application>
          </para>
          <indexterm zone="llvm scan-build-py">
            <primary sortas="b-scan-build-py">scan-build-py</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scan-view">
        <term><command>scan-view</command></term>
        <listitem>
          <para>
            é um visualizador dos resultados do analisador estático
<application>Clang</application>
          </para>
          <indexterm zone="llvm scan-view">
            <primary sortas="b-scan-view">scan-view</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="split-file">
        <term><command>split-file</command></term>
        <listitem>
          <para>
            divide um arquivo de entrada em múltiplas partes separadas por expressão
regular
          </para>
          <indexterm zone="llvm split-file">
            <primary sortas="b-split-file">split-file</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="verify-uselistorder">
        <term><command>verify-uselistorder</command></term>
        <listitem>
          <para>
            é a ferramenta do <application>LLVM</application> para verificar a ordem da
lista de uso
          </para>
          <indexterm zone="llvm verify-uselistorder">
            <primary sortas="b-verify-uselistorder">verify-uselistorder</primary>
          </indexterm>
        </listitem>
      </varlistentry>

<!-- Removed in 12.0.0
      <varlistentry id="yaml2obj">

        <term><command>yaml2obj</command></term>
        <listitem>
          <para>
            takes a YAML representation of an object file and converts it
            to a binary file
          </para>
          <indexterm zone="llvm yaml2obj">
            <primary sortas="b-yaml2obj">yaml2obj</primary>
          </indexterm>
        </listitem>
      </varlistentry>
-->
<!--
      <varlistentry id="libllvm">

        <term><filename class="libraryfile">libLLVM-&llvm-version;.so</filename></term>
        <listitem>
          <para>
            contains the <application>LLVM</application> API functions.
          </para>
          <indexterm zone="llvm libllvm">
            <primary sortas="c-libllvm">libLLVM-&llvm-version;.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libprofile_rt">
        <term><filename class="libraryfile">libprofile_rt.so</filename></term>
        <listitem>
          <para>
            is the C, C++ and Objective-C runtime library for
            <application>Clang</application>.
          </para>
          <indexterm zone="llvm libprofile_rt">
            <primary sortas="c-libprofile_rt">libprofile_rt.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>-->



    </variablelist>

  </sect2>

</sect1>
