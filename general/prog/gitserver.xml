<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
  <!ENTITY gitgid "58">
  <!ENTITY gituid "58">
]>

<sect1 id="gitserver" xreflabel="Executando um Servidor &quot;Git&quot;">
  <?dbhtml filename="gitserver.html"?>


  <title>Executando um Servidor &quot;Git&quot;</title>

  <sect2 role="package">
    <title>Introdução</title>

    <para>
      Esta seção descreverá como configurar, administrar e proteger um servidor
<application>git</application>. <application>Git</application> tem muitas
opções disponíveis. Para documentação mais detalhada, veja-se <ulink
url="https://git-scm.com/book/en/v2"/>.
    </para>

    <bridgehead renderas="sect3">Dependências do Servidor</bridgehead>

    <bridgehead renderas="sect4">Exigidas</bridgehead>
    <para role="required">
      <xref linkend="git"/> e <xref linkend="openssh"/>
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Configurando um Servidor &quot;Git&quot;</title>

    <para>
      As instruções a seguir instalarão um servidor
<application>git</application>. Ele será configurado para usar
<application>OpenSSH</application> como método de acesso remoto seguro.
    </para>

    <para>
      A configuração do servidor consiste nas seguintes etapas:
    </para>

    <sect3>
      <title>1. Configurar Usuários(as), Grupos e Permissões</title>

      <para>
        Você precisará ser o(a) usuário(a) <systemitem
class='username'>root</systemitem> para a parte inicial da
configuração. Crie o(a) usuário(a) e grupo <systemitem
class="username">git</systemitem> e defina um resumo de senha inutilizável
com os seguintes comandos:
      </para>

<screen role="root"><userinput>groupadd -g &gitgid; git &amp;&amp;
useradd -c "Proprietário(a) do git" -d /home/git -m -g git -s /usr/bin/git-shell -u &gituid; git &amp;&amp;
sed -i '/^git:/s/^git:[^:]:/git:NP:/' /etc/shadow</userinput></screen>

      <para>
        Colocar um resumo de senha inutilizável (substituindo <literal>!</literal>
por <literal>NP</literal>) desbloqueia a conta, mas ela não pode ser usada
para se conectar via autenticação de senha. Isso é exigido pelo
<application>sshd</application> para funcionar corretamente. Em seguida,
crie alguns arquivos e diretórios no diretório &quot;home&quot; do(a)
usuário(a) git, permitindo acesso ao repositório &quot;git&quot; usando
chaves &quot;ssh&quot;.
      </para>

<screen role="root"><userinput>install -o git -g git -dm0700 /home/git/.ssh &amp;&amp;
install -o git -g git -m0600 /dev/null /home/git/.ssh/authorized_keys</userinput></screen>

      <para>
        Para qualquer desenvolvedor(a) que devesse ter acesso ao repositório,
adicione a chave pública &quot;ssh&quot; dele/dela em
<filename>/home/git/.ssh/authorized_keys</filename>. Primeiro, acrescente
algumas opções para evitar que os(as) usuários(as) usem a conexão com o
&quot;git&quot; para encaminhamento de porta para outras máquinas que o
servidor &quot;git&quot; possa alcançar.
      </para>

<screen role="nodump"><userinput>echo -n "no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty " >> /home/git/.ssh/authorized_keys &amp;&amp;
cat &lt;chave-ssh-usuário(a)&gt; &gt;&gt; /home/git/.ssh/authorized_keys</userinput></screen>

      <para>
        Também é útil definir o nome padrão da ramificação inicial de novos
repositórios modificando a configuração do &quot;git&quot;. Como o(a)
usuário(a) <systemitem class='username'>root</systemitem>, execute:
      </para>

<screen role="nodump"><userinput>git config --system init.defaultBranch trunk</userinput></screen>

      <para>
        Por fim, adicione a entrada <filename>/usr/bin/git-shell</filename> ao
arquivo de configuração <filename>/etc/shells</filename>. Esse shell foi
definido no perfil do(a) usuário(a) <systemitem
class='username'>git</systemitem> e serve para garantir que somente ações
relacionadas ao &quot;git&quot; possam ser executadas:
      </para>

<screen role="root"><userinput>echo "/usr/bin/git-shell" &gt;&gt; /etc/shells</userinput></screen>

    </sect3>

    <sect3>
      <title>2. Criar um repositório &quot;git&quot;</title>

      <para>
        O repositório pode estar em qualquer lugar no sistema de arquivos. É
importante que o(a) usuário(a) &quot;git&quot; tenha acesso de
leitura/escrita a esse local. Usamos <filename
class="directory">/srv/git</filename> como diretório base. Crie um novo
repositório <application>git</application> com os seguintes comandos (como
o(a) usuário(a) <systemitem class="username">root</systemitem>):
      </para>

      <note>
        <para>
          Em todas as instruções abaixo, usamos <emphasis>projeto1</emphasis> como um
nome de repositório de exemplo. Você deveria nomear seu repositório como um
nome descritivo curto para seu projeto específico.
        </para>
      </note>

<screen role="root"><userinput>install -o git -g git -m755 -d /srv/git/projeto1.git &amp;&amp;
cd /srv/git/projeto1.git                             &amp;&amp;
git init --bare                                      &amp;&amp;
chown -R git:git .</userinput></screen>

    </sect3>

    <sect3>
      <title>3. Povoar o repositório a partir de um sistema cliente</title>

      <note>
        <para>
          Todas as instruções nesta seção e na próxima deveriam ser feitas em um
sistema do(a) usuário(a), não no sistema do servidor.
        </para>
      </note>

      <para>
        Agora que o repositório foi criado, ele pode ser usado pelos(as)
desenvolvedores(as) para colocar alguns arquivos nele. Depois que a chave
&quot;ssh&quot; do(a) usuário(a) for importada para o arquivo
<filename>authorized_keys</filename> do &quot;git&quot;, o(a) usuário(a)
poderá interagir com o repositório.
      </para>

      <para>
        Uma configuração mínima deveria estar disponível no sistema do(a)
desenvolvedor(a) especificando o nome de usuário(a) e endereço de correio
eletrônico dele(a). Crie esse arquivo de configuração mínima no lado do
cliente:
      </para>

<screen role="nodump"><userinput>cat &gt; ~/.gitconfig &lt;&lt;EOF
[user]
        name = &lt;nome-usuário(a)&gt;
        email = &lt;endereço-correio-eletrônico-usuário(a)&gt;
EOF</userinput></screen>

      <para>
        Na máquina do(a) desenvolvedor(a), configure alguns arquivos para serem
enviados ao repositório como conteúdo inicial:
      </para>

      <note>
        <para>
          O termo <emphasis>gitserver</emphasis> usado abaixo deveria ser o nome do
dispositivo (ou endereço &quot;IP&quot;) do servidor &quot;git&quot;.
        </para>
      </note>

<screen role="nodump"><userinput>mkdir meuprojeto
cd meuprojeto
git init --initial-branch=trunk
git remote add origin git@gitserver:/srv/git/projeto1.git
cat &gt;LEIAME &lt;&lt;EOF
Este é o arquivo 'LEIAME'
EOF
git add LEIAME
git commit -m 'Criação inicial do LEIAME'
git push --set-upstream origin trunk</userinput></screen>

      <para>O conteúdo inicial agora é enviado ao servidor e fica disponível para
outros(as) usuários(as). Na máquina atual, o argumento
<literal>--set-upstream origin trunk</literal> agora não é mais necessário,
pois o repositório local agora está conectado ao repositório remoto. Envios
subsequentes podem ser realizados como
      </para>

<screen role="nodump"><userinput>git push</userinput></screen>

      <para>
        Outros(as) desenvolvedores(as) agora podem clonar o repositório e fazer
modificações no conteúdo (desde que as chaves &quot;ssh&quot; deles(as)
tenham sido instaladas):
      </para>

<screen role="nodump"><userinput>git clone git@gitserver:/srv/git/projeto1.git
cd projeto1
vi LEIAME
git commit -am 'Correção para o arquivo LEIAME'
git push</userinput></screen>

      <note>
        <para>
          Essa é uma configuração de servidor muito básica baseada no acesso
<application>OpenSSH</application>. Todos(as) os(as) desenvolvedores(as)
estão usando o(a) usuário(a) <systemitem class="username">git</systemitem>
para realizar ações no repositório e as mudanças que os(as) usuários(as)
estão &quot;comitando&quot; podem ser distinguidas como o nome de usuário(a)
local (veja-se <filename>~/.gitconfig</filename>) sendo registrado nos
conjuntos de mudanças.
        </para>
      </note>

      <para>
        O acesso é restrito pelas chaves públicas adicionadas ao arquivo
<filename>authorized_keys</filename> do &quot;git&quot; e não existe opção
para o público exportar/clonar o repositório. Para habilitar isso, continue
com a etapa quatro (4) para configurar o servidor &quot;git&quot; para
acesso público somente leitura.
      </para>

      <para>
        Na &quot;URL&quot; usada para clonar o projeto, o caminho absoluto (aqui
<filename>/srv/git/projeto1.git</filename>) tem de ser especificado, pois o
repositório não está no diretório &quot;home&quot; do &quot;git&quot;, mas
em <filename class="directory">/srv/git</filename>. Para eliminar a
necessidade de expor a estrutura de instalação do servidor, um link
simbólico pode ser adicionado no diretório &quot;home&quot; do
&quot;git&quot; para cada projeto, como isto:
      </para>
<screen role="nodump"><userinput>ln -svf /srv/git/projeto1.git /home/git/</userinput></screen>

      <para>
        Agora, o repositório pode ser clonado usando
      </para>
<screen role="nodump"><userinput>git clone git@gitserver:projeto1.git</userinput></screen>

    </sect3>

    <sect3 id="gitserver-init">
      <title>4. Configurar o Servidor</title>

      <para>
        A configuração descrita acima torna um repositório disponível para
usuários(as) autenticados(as) (via fornecimento do arquivo de chave pública
&quot;ssh&quot;). Também existe uma maneira simples de publicar o
repositório para usuários(as) não autenticados(as) &mdash; certamente, sem
acesso de escrita.
      </para>

      <para>
        A combinação do acesso via &quot;ssh&quot; (para usuários(as)
autenticados(as)) e a exportação de repositórios para usuários(as) não
autenticados(as) via processo de segundo plano é, na maioria dos casos,
suficiente para um sítio de desenvolvimento.
      </para>

      <note>
        <para>
          O processo de segundo plano estará alcançável na porta
<literal>9418</literal> por padrão. Certifique-se de que a configuração do
seu &quot;firewall&quot; permite acesso a essa porta.
        </para>
      </note>

      <para revision="sysv">
        Para iniciar o servidor em tempo de inicialização, instale o script de
inicialização &quot;git-daemon&quot; incluído no pacote <xref
linkend="bootscripts"/>:
      </para>

      <indexterm zone="gitserver gitserver-init" revision="sysv">
        <primary sortas="f-git">git</primary>
      </indexterm>

<screen role="root" revision="sysv"><userinput>make install-git-daemon</userinput></screen>

      <para revision="systemd">
        Para iniciar o servidor em tempo de inicialização, instale a unidade
<filename>git-daemon.service</filename> a partir do pacote <xref
linkend="systemd-units"/>:
      </para>

      <indexterm zone="gitserver gitserver-init" revision="systemd">
        <primary sortas="f-gitserve">gitserve</primary>
      </indexterm>

<screen role="root" revision="systemd"><userinput>make install-git-daemon</userinput></screen>

      <para>
        Para a finalidade de permitir que o <application>git</application> exporte
um repositório, um arquivo chamado <filename>git-daemon-export-ok</filename>
é necessário em cada diretório de repositório no servidor. O arquivo não
necessita de conteúdo; apenas a existência dele habilita; a ausência dele
desabilita a exportação daquele repositório.
      </para>

<screen role="root"><userinput>touch /srv/git/projeto1.git/git-daemon-export-ok</userinput></screen>

      <para revision="sysv">
        O &quot;script&quot; para iniciar o processo de segundo plano
&quot;git&quot; usa alguns valores padrão internamente. O mais importante é
o caminho para o diretório do repositório que está definido como <filename
class="directory">/srv/git</filename>. Caso, por algum motivo, você tenha
criado o repositório em um local diferente, você precisará informar ao
&quot;script&quot; de inicialização onde o repositório pode ser
encontrado. Isso pode ser conseguido criando um arquivo de configuração
chamado <filename>/etc/sysconfig/git-daemon</filename>. Esse arquivo de
configuração será importado se existir, significando que ele é opcional. O
arquivo pode ser parecido com:</para>
<screen revision="sysv">
# Começo /etc/sysconfig/git-daemon

# Especifica o local do repositório "git"
GIT_BASE_DIR="/srv/git/"

# Diretórios adicionados à lista de permissões
DFT_REPO_DIR="$GIT_BASE_DIR"

# Adiciona opções extras que serão anexadas ao comando 'git daemon'
# executado no script de inicialização
GIT_DAEMON_OPTS=""

# Término /etc/sysconfig/git-daemon
</screen>
      <para revision="systemd">
        Junto com a unidade <filename>git-daemon.service</filename>, um arquivo de
configuração chamado <filename>/etc/default/git-daemon</filename> foi
instalado. Revise esse arquivo de configuração para corresponder às suas
necessidades.
      </para>

      <para>
        Existem somente três opções a configurar no arquivo de configuração:
        <itemizedlist>
          <listitem>
            <para>
              GIT_BASE_DIR=&lt;nome-diretório&gt;
            </para>
            <para>Especifique o local dos repositórios &quot;git&quot;. Os caminhos relativos
usados ao acessar o processo de segundo plano serão traduzidos relativos a
esse diretório.
            </para>
          </listitem>
          <listitem>
            <para>
              DFT_REPO_DIR=&lt;nome-diretório&gt;
            </para>
            <para>Esse diretório é adicionado à lista branca de diretórios permitidos. Essa
variável pode conter vários nomes de diretório, mas geralmente é definida
igual a <literal>GIT_BASE_DIR</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              GIT_DAEMON_OPTS=&lt;opções&gt;
            </para>
            <para>
              No caso de opções especiais para o comando <command>git daemon</command>
serem necessárias, elas tem de ser especificadas nessa configuração. Um
exemplo pode ser ajustar o número da porta onde o processo de segundo plano
está escutando. Nesse caso, adicione <literal>--port=&lt;número da
porta&gt;</literal> a essa variável. Para mais informações relativas a quais
opções podem ser definidas, dê uma olhada na saída gerada de <command>git
daemon --help</command>.
            </para>
          </listitem>
        </itemizedlist>
      </para>

      <para>
        Após iniciar o processo de segundo plano, usuários(as) não autenticados(as)
conseguem clonar repositórios exportados usando
      </para>
<screen role="nodump"><userinput>git clone git://gitserver/projeto1.git</userinput></screen>

      <para>
        Como o diretório base é <filename class="directory">/srv/git</filename> por
padrão (ou definido como um valor personalizado na configuração),
<application>git</application> interpreta o caminho de entrada
(/projeto1.git) relativo a esse diretório base, de modo que o repositório em
<filename class="directory">/srv/git/projeto1.git</filename> seja servido.
      </para>

    </sect3>

  </sect2>

</sect1>
