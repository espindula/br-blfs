<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

<!-- for when firefox and js91 use same version
  <!ENTITY ff91-version       "&firefox-version;">
  and when they are on different versions - keep this for when
  we have moved to next firefox-esr (ff-91) and JS  has not moved
  <!ENTITY ff91-version       "&JS91-version;"> -->

  <!ENTITY ff102-version       "&firefox-version;">
  <!ENTITY js102-download-http "&mozilla-http;/firefox/releases/&JS102-version;esr/source/firefox-&JS102-version;esr.source.tar.xz">
  <!ENTITY js102-download-ftp  "">
  <!ENTITY js102-md5sum        "&firefox-md5;">
  <!ENTITY js102-size          "457 MB">
  <!ENTITY js102-buildsize     "3,3 GB (38 MB instalado depois de remover biblioteca estática de 34 MB)">
  <!ENTITY js102-time          "1,8 UPC (com paralelismo=4)">
]>

<sect1 id="js102" xreflabel="JS-&JS102-version;">
  <?dbhtml filename="js102.html"?>


  <title>JS-&JS102-version;</title>

  <indexterm zone="js102">
    <primary sortas="a-js102">js102</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introdução a JS</title>

    <para>
      <application>JS</application> (também conhecido como
<application>SpiderMonkey</application>) é o mecanismo JavaScript e
WebAssembly da Mozilla, escrito em C++ e Rust. No BLFS, o código-fonte do JS
é retirado a partir do Firefox.
    </para>

    
    <!-- To editors: make sure polkit work with mozjs before
         tagging mozjs.  -->
&lfs113_checked;

    <bridgehead renderas="sect3">Informação do Pacote</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência (HTTP): <ulink url="&js102-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Transferência (FTP): <ulink url="&js102-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &js102-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &js102-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &js102-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Tempo de construção estimado: &js102-time;
        </para>
      </listitem>
    </itemizedlist>

    <!--
    <bridgehead renderas="sect3">
Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&patch-root;/js-&JS91-version;-python_3_10-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>
-->
<bridgehead renderas="sect3">Dependências do JS102</bridgehead>

    <bridgehead renderas="sect4">Exigidas</bridgehead>
    <para role="required">
      <xref linkend="icu"/>, <xref linkend="rust"/> e <xref linkend="which"/>
    </para>

    <bridgehead renderas="sect4">Recomendada</bridgehead>
    <para role="recommended">
      
      <!-- If clang is installed, it will be used instead of gcc.
           gcc does not work for 32-bit system w/o -msse2 -mfpmath=sse:
           https://bugzilla.mozilla.org/show_bug.cgi?id=1729459 -->
<xref linkend="llvm"/> (com o <application>Clang</application>, exigido para
sistemas de 32 bits sem recursos "SSE2")
    </para>

    
    

    <!-- It seems nasm is only used for aarch64-win64. -->
<!--bridgehead renderas="sect4">
Optional</bridgehead>
    <para role="optional">
      <xref linkend="nasm"/>
    </para-->
<para condition="html" role="usernotes">
      Observações de Usuário(a): <ulink url="&blfs-wiki;/js102"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Instalação do JS</title>

    <note>
      <para>
        Ao contrário da maioria dos outros pacotes no BLFS, as instruções abaixo
exigem que você descompacte
<filename>firefox-&JS102-version;esr.tar.xz</filename> e mude para a pasta
<filename>firefox-&JS102-version;</filename>.
      </para>

      <para>
        Extrair o "tarball" reconfigurará as permissões do diretório atual para
0755, se você tiver permissão para fazer isso. Se você fizer isso em um
diretório onde o bit "sticky" estiver configurado, tal como o <filename
class="directory">/tmp</filename>, [então] ele terminará com mensagens de
erro:
      </para>

<literallayout>tar: .: Não é possível utime: Operação não permitida
tar: .: Não é possível mudar o modo para rwxr-xr-t: Operação não permitida
tar: Saindo com status de falha devido a erros anteriores
</literallayout>

      <para>
        Isso termina com um status diferente de zero, porém <emphasis>NÃO</emphasis>
significa que existe um problema real. Não descompacte como o(a) usuário(a)
<systemitem class="username">root</systemitem> em um diretório onde o bit
"sticky" estiver configurado - isso irá desconfigurá-lo.
      </para>

    </note>

    <!-- not needed when using clang.  Upstream bug at
     https://bugzilla.mozilla.org/show_bug.cgi?id=1729459

    <para>

      If building on a 32 bit machine, the following sed works around an issue
      with an incompatible <quote>double</quote> type in one header file:
    </para>

<screen><userinput>case "$(uname -m)" in
    i?86) sed -e '/typedef[ ]*double/s/double/long double/' \
              -i modules/fdlibm/src/math_private.h ;;
esac</userinput></screen>
-->
<para>
      Instale <application>JS</application> executando os seguintes comandos:
    </para>

    <note>
      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
         href="../../xincludes/mozshm.xml"/>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
         href="../../xincludes/mozconfigure.xml"/>

      <para>
        A compilação do código C++ respeita "$MAKEFLAGS" e o padrão é 'j1'; o código
"Rust" usará todos os processadores.
      </para>
    </note>

    <para>
      Primeiro remova um sinalizador obsoleto no código "Python", que foi removido
no "python-3.11":
    </para>

<screen><userinput>grep -rl \"rU\" | xargs sed -i 's/"rU"/"r"/'</userinput></screen>

    <para>
      Em seguida execute:
    </para>

<screen><userinput>mkdir obj &amp;&amp;
cd    obj &amp;&amp;

sh ../js/src/configure.in --prefix=/usr            \
                          --with-intl-api          \
                          --with-system-zlib       \
                          --with-system-icu        \
                          --disable-jemalloc       \
                          --disable-debug-symbols  \
                          --enable-readline        &amp;&amp;
make</userinput></screen>

    <para>
      <!-- recheck when ICU gets upgraded -->
<!-- Still true with 102 -renodr -->
Para executar a suíte de teste do JS, emita: <command>make -C js/src
check-jstests JSESTS_EXTRA_ARGS="--timeout 300 --wpt=disabled"</command>. É
recomendável redirecionar a saída gerada para um [arquivo de] registro. Como
estamos construindo com o "ICU" do sistema, mais de cem testes (de um total
de mais de 50.000) são conhecidos por falharem.
    </para>
    <para>
      Para executar a suíte de teste do JIT, emita: <command>make -C js/src
check-jit-test JITTEST_EXTRA_ARGS="--timeout 300"</command>.
    </para>

    <caution>
      <para>
        Um problema no processo de instalação faz com que qualquer aplicativo em
execução e que se vincule à biblioteca compartilhada "JS102" (por exemplo,
GNOME Shell) quebre se a "JS102" for atualizada ou for reinstalada. Para
contornar esse problema, remova a versão antiga da biblioteca compartilhada
"JS102" antes da instalação:
      </para>

<screen role="root"><userinput>rm -fv /usr/lib/libmozjs-102.so</userinput></screen>
    </caution>

    <para>
      Agora, como o(a) usuário(a) <systemitem class="username">root</systemitem>:
    </para>

<screen role="root"><userinput>make install &amp;&amp;
rm -v /usr/lib/libjs_static.ajs &amp;&amp;
sed -i '/@NSPR_CFLAGS@/d' /usr/bin/js102-config</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explicações do Comando</title>

    <para>
      <command>sh ../js/src/configure.in</command>:
<filename>configure.in</filename> é na verdade um script de shell, porém o
bit executável não está configurado no modo de permissão dele, de modo que é
necessário executá-lo explicitamente com o <command>sh</command>.
    </para>

    <para>
      <parameter>--with-intl-api</parameter>: Isso habilita as funções de
internacionalização exigidas pelo <application>Gjs</application>.
    </para>

    <para>
      <parameter>--with-system-*</parameter>: Esses parâmetros permitem que o
sistema de construção use versões do sistema das bibliotecas acima. Essas
são exigidas para a estabilidade.
    </para>

    <para>
      <parameter>--enable-readline</parameter>: Essa chave habilita o suporte a
"Readline" no shell do "JS".
    </para>

    <para>
      <parameter>--disable-jemalloc</parameter>: Essa chave desabilita o alocador
interno de memória usado no "JS102". o "jemalloc" destina-se somente ao
ambiente do navegador Firefox. Para outros aplicativos que usam a "JS102", o
aplicativo possivelmente quebre quando os itens alocados no alocador
"jemalloc" forem liberados no alocador do sistema (glibc).
    </para>

    <para>
      <parameter>--disable-debug-symbols</parameter>: Não gere símbolos de
depuração, pois eles são muito grandes e a maioria dos(as) usuários(as) não
precisará deles. Remova-a se quiser depurar a "JS102".
    </para>

    <para>
      <command>rm -v /usr/lib/libjs_static.ajs</command>: Remove uma grande
biblioteca estática que não é usada por nenhum pacote do BLFS.
    </para>

    <para>
      <command>sed -i '/@NSPR_CFLAGS@/d' /usr/bin/js102-config</command>: Evita
que <command>js102-config</command> use "CFLAGS" defeituosos.
    </para>

    <para>
      <option><envar>CC=gcc CXX=g++</envar></option>: o BLFS costumava preferir
usar gcc e g++ em vez dos padrões do(a) desenvolvedor(a) dos aplicativos
<application>clang</application>. Com o lançamento do gcc-12, a construção
toma mais tempo com gcc e g++, principalmente por causa de avisos extras, e
é maior. Passe essas variáveis de ambiente para o script de configuração se
desejar continuar a usar gcc, g++ (exportando-as e desconfigurando-as depois
da instalação ou simplesmente anexando-as antes do comando <command>sh
../js/src/configure.in</command>). Se você estiver construindo em um sistema
de 32 bits, [então] também veja abaixo.
    </para>

    <para>
      <option><envar>CXXFLAGS="-msse2 -mfpmath=sse"</envar></option>: Use "SSE2"
em vez de "387" para operações de ponto flutuante de precisão dupla. É
necessário para o GCC satisfazer as expectativas dos(as) desenvolvedores(as)
"upstream" (Mozilla) com aritmética de ponto flutuante. Use-o se estiver
construindo esse pacote em um sistema de 32 bits com GCC (se o "Clang" não
estiver instalado ou o GCC for explicitamente especificado). Observe que
isso fará com que o "JS" quebre em um processador sem capacidade "SSE2". Se
você estiver executando o sistema em um processador tão antigo, [então] o
"Clang" é estritamente necessário. Essa configuração não é necessária em
sistemas de 64 bits, pois todos os processadores x86 de 64 bits suportam
"SSE2" e os compiladores de 64 bits (ambos "Clang" e GCC) usam "SSE2" por
padrão.
    </para>
  </sect2>

  <sect2 role="content">
    <title>Conteúdo</title>

    <segmentedlist>
      <segtitle>Aplicativos Instalados</segtitle>
      <segtitle>Bibliotecas Instaladas</segtitle>
      <segtitle>Diretórios Instalados</segtitle>

      <seglistitem>
        <seg>
          js102 e js102-config
        </seg>
        <seg>
          libmozjs-102.so
        </seg>
        <seg>
          /usr/include/mozjs-102
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descrições Curtas</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="js102-js102">
        <term><command>js102</command></term>
        <listitem>
          <para>
            fornece uma interface de linha de comando para o mecanismo
<application>JavaScript</application>
          </para>
          <indexterm zone="js102 js102">
            <primary sortas="b-js102">js102</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="js102-config">
        <term><command>js102-config</command></term>
        <listitem>
          <para>
            é usado para encontrar o compilador "JS" e sinalizadores do vinculador
          </para>
          <indexterm zone="js102 js102-config">
            <primary sortas="b-js102-config">js102-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmozjs-102">
        <term><filename class="libraryfile">libmozjs-102.so</filename></term>
        <listitem>
          <para>
            contém as funções da API do JavaScript da Mozilla
          </para>
          <indexterm zone="js102 libmozjs-102">
            <primary sortas="c-libmozjs102">libmozjs-102.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect2>

</sect1>
