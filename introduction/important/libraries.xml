<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="libraries" xreflabel="bibliotecas">
  <?dbhtml filename="libraries.html"?>


  <title>Bibliotecas: Estáticas ou compartilhadas?</title>

  
  <indexterm zone="libraries">
    <!-- section g : 'Others' in longindex.html -->
<primary sortas="g-libraries">bibliotecas: estáticas ou compartilhadas</primary>
  </indexterm>

  <sect2 role="package">
    <title>Bibliotecas: Estáticas ou compartilhadas?</title>

    <para>
      As bibliotecas originais eram simplesmente um arquivamento de rotinas a
partir do qual as rotinas necessárias eram extraídas e vinculadas ao
aplicativo executável. Elas são descritas como bibliotecas estáticas, com
nomes no formato <filename>libfoo.a</filename> em sistemas operacionais do
tipo UNIX. Em alguns sistemas operacionais antigos elas são o único tipo
disponível.
    </para>

    <para>
      Em quase todas as plataformas Linux também existem bibliotecas
<quote>compartilhadas</quote> (ou equivalentemente <quote>dinâmicas</quote>)
(com nomes no formato <filename>libfoo.so</filename>) &ndash; uma cópia da
biblioteca é carregada na memória virtual e compartilhada por todos os
aplicativos que chamam alguma das funções dela. Isso é eficiente em termos
de espaço.
    </para>

    <para>
      No passado, aplicativos essenciais, como um "shell", frequentemente eram
vinculados estaticamente, de forma que existisse alguma forma de sistema
mínimo de recuperação, mesmo se bibliotecas compartilhadas, como
<filename>libc.so</filename>, se tornassem danificadas (por exemplo, movidas
para <filename class="directory">lost+found</filename> depois de
<command>fsck</command> após um desligamento incorreto). Hoje em dia, a
maioria das pessoas usa uma instalação alternativa de sistema ou um pendrive
se precisar se recuperar. Os sistemas de arquivos com registro em diário
também reduzem a probabilidade desse tipo de problema.
    </para>


    <!-- really?
    <para>

      Developers, at least while they are developing, often prefer to use
      static versions of the libraries which their code links to.
    </para>
-->
<para>
      Dentro do livro, existem vários locais onde chaves de configuração, tais
como <parameter>--disable-static</parameter>, são empregadas; e outros
locais onde a possibilidade de usar versões de sistema das bibliotecas em
vez das versões inclusas em outro pacote é discutida. A razão principal para
isso é a de simplificar as atualizações de bibliotecas.
    </para>

    <para>
      Se um pacote for vinculado a uma biblioteca dinâmica, [então] a atualização
para uma versão mais recente da biblioteca é automática tão logo a
biblioteca mais recente seja instalada e o aplicativo for (re)iniciado
(condicionada a que a versão maior da biblioteca não seja modificada, por
exemplo, indo de <filename>libfoo.so.2.0</filename> para
<filename>libfoo.so.2.1</filename>. Ir para <filename>libfoo.so.3</filename>
exigirá recompilação &ndash; o <command>ldd</command> pode ser usado para
encontrar quais aplicativos usam a versão antiga). Se um aplicativo for
vinculado a uma biblioteca estática, [então] o aplicativo sempre tem de ser
recompilado. Se você souber quais aplicativos estão vinculados a uma
biblioteca estática em particular, [então] isso é meramente um
aborrecimento. Entretanto, normalmente você <emphasis>não</emphasis> saberá
quais aplicativos recompilar.
    </para>

    <!-- obsolete with /usr merge
    <para>
Most libraries are shared, but if you do something unusual, such as
    moving a shared library to <filename class="directory">/lib</filename>
    accidentally breaking the <literal>.so</literal> symlink in
    <filename class="directory">/usr/lib</filename> while keeping the static
    library in <filename class="directory">/lib</filename>, the static library
    will be silently linked into the programs which need it.</para>
-->
<para>
      Uma forma de identificar quando uma biblioteca estática é usada é a de
tratar disso ao final da instalação de cada pacote. Escreva um script para
achar todas as bibliotecas estáticas em <filename
class="directory">/usr/lib</filename> ou onde quer que você esteja
instalando, e, ou mova-as para outro diretório, de forma que não mais sejam
encontradas pelo vinculador; ou renomeie-as, de forma que
<filename>libfoo.a</filename> se torne, por
exemplo. <filename>libfoo.a.oculta</filename>. A biblioteca estática pode
então ser restaurada temporariamente se for efetivamente necessária, e o
pacote que precisa dela pode ser identificado. Isso não deveria ser feito às
cegas, pois muitas bibliotecas existem somente em uma versão estática. Por
exemplo, algumas bibliotecas originárias dos pacotes
<application>glibc</application> e <application>gcc</application> deveriam
sempre estar presentes no sistema (<filename>libc_nonshared.a, libg.a,
libpthread_nonshared.a, libssp_nonshared. a, libsupc++.a</filename> desde
"glibc-2.36" e "gcc-12.2").
    </para>


    <!-- versions hardcoded in this para, it's a comment on those versions  -->
<para>Se você usar essa abordagem, [então] você possivelmente descubra que mais
pacotes que o que estava esperando usam uma biblioteca estática. Esse foi o
caso com o <application>nettle-2.4</application> na configuração padrão
somente estática dele: Ele era exigido pelo
<application>GnuTLS-3.0.19</application>, porém vinculado também em
pacote(s) que usa(m) o <application>GnuTLS</application>, tais como o
<application>glib-networking-2.32.3</application>.</para>

    <para>Muitos pacotes colocam algumas das funções comuns deles em uma biblioteca
estática que somente é usada pelos aplicativos dentro do pacote e,
crucialmente, a biblioteca <emphasis>não</emphasis> é instalada como uma
biblioteca independente. Essas bibliotecas internas não são um problema
&ndash; se o pacote tiver de ser reconstruído para corrigir um defeito ou
uma vulnerabilidade, [então] nada mais é vinculado a elas.</para>

    <para>Quando o BLFS menciona bibliotecas de sistema, significa versões
compartilhadas de bibliotecas. Alguns pacotes como <xref linkend="firefox"/>
e <xref linkend="gs"/> agrupam muitas outras bibliotecas na árvore de
construção deles. A versão que eles enviam geralmente é mais antiga que a
versão usada no sistema, portanto possivelmente contenham defeitos &ndash;
às vezes os(as) desenvolvedores(as) se dão ao trabalho de consertar defeitos
nas bibliotecas incluídas deles(as), outras vezes não.</para>

    <para>Ocasionalmente, decidir usar as bibliotecas do sistema é uma decisão
fácil. Outras vezes, possivelmente exija que você altere a versão do sistema
(por exemplo, para a <xref linkend="libpng"/>, se usada pelo <xref
linkend="firefox"/>). De vez em quando, um pacote envia uma biblioteca
antiga e não mais pode se vincular à versão atual, porém pode se vincular a
uma versão mais antiga. Nesse caso, o BLFS normalmente usará apenas a versão
enviada. De quando em quando, a biblioteca inclusa não mais é desenvolvida
separadamente; ou o(a) desenvolvedor(a) dela é o(a) mesmo(a) que o
desenvolvedor(a) do pacote e você não tem outros pacotes que a
usarão. Nesses casos, você será levado(a) a usar a biblioteca inclusa, mesmo
se geralmente preferir usar as bibliotecas do sistema.</para>

    <para condition="html" role="usernotes">Observações de Usuário(a): <ulink url="&blfs-wiki;/libraries"/></para>

  </sect2>

</sect1>
