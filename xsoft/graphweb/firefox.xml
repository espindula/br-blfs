<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY firefox-download-http "&mozilla-http;/firefox/releases/&firefox-version;esr/source/firefox-&firefox-version;esr.source.tar.xz">
  <!ENTITY firefox-download-ftp  "">
  <!ENTITY firefox-md5sum        "&firefox-md5;">
  <!ENTITY firefox-size          "457Mo">
  <!-- NB with stylo, much of the build uses rust, and therefore cargo files.
    But the extra cached cargo files, if any, seem to be minimal -->
  <!ENTITY firefox-buildsize     "7.0 GB (197 MB installed) without tests">
  <!-- editors: with ff63 and rust-1.29, ./mach build -j4 is probably the
   most practical way to get a timing on a machine with more cores, if taking
   cores offline is not practical. If in doubt, round up -->
  <!ENTITY firefox-time          "20 SBU using -j4, without tests">
]>

<sect1 id="firefox" xreflabel="Firefox-&firefox-version;">
  <!-- indicate this is the ESR variant,
  The point was that the 102.0 stable release differed slightly.
  <title>
Firefox-&firefox-version;</title>-->
<?dbhtml filename="firefox.html" ?>



  <title>Firefox-&firefox-version;esr</title>

  <indexterm zone="firefox">
    <primary sortas="a-Firefox">Firefox</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introdução a Firefox</title>

    <para>
      <application>Firefox</application> is a stand-alone browser based on the
<application>Mozilla</application> codebase.
    </para>

    &lfs113_checked;

    <bridgehead renderas="sect3">Informação do Pacote</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência (HTTP): <ulink url="&firefox-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Transferência (FTP): <ulink url="&firefox-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5: &firefox-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &firefox-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &firefox-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Tempo de construção estimado: &firefox-time;
        </para>
      </listitem>
    </itemizedlist>



    <!--<bridgehead renderas="sect3">
Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&patch-root;/firefox-&firefox-version;esr-gcc12_fix-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Recommended patch:
          <ulink url="&patch-root;/firefox-&firefox-version;esr-disable_rust_test-1.patch"/>
        </para>
      </listitem>
    </itemizedlist>-->
<note>
      <para>
        The directory name is firefox-&firefox-version;
      </para>

      <para>
        Extracting the tarball will reset the permissions of the current directory
to 0755 if you have permission to do that. If you do this in a directory
where the sticky bit is set, such as <filename
class="directory">/tmp</filename> it will end with error messages:
      </para>

<literallayout>tar: .: Cannot utime: Operation not permitted
tar: .: Cannot change mode to rwxr-xr-t: Operation not permitted
tar: Exiting with failure status due to previous errors
</literallayout>

      <para>
        This does finish with non-zero status, but it does <emphasis>NOT</emphasis>
mean there is a real problem.  Do not untar as the <systemitem
class="username">root</systemitem> user in a directory where the sticky bit
is set - that will unset it.
      </para>

      <para>
        As with other large packages which use C++ (or rust), the SBU times to build
this vary more widely than you might expect. The build times will increase
significantly if your machine has to swap.
      </para>

      <para>
        Although upstream prefer to use <application>PulseAudio</application>, for
the moment <application>Alsa</application> can still be used. Both may need
runtime configuration to get sound working.
      </para>
    </note>

    <bridgehead renderas="sect3">Dependências de Firefox</bridgehead>

    <bridgehead renderas="sect4">Exigida</bridgehead>
    <para role="required">
      <xref linkend="autoconf213"/>, <xref linkend="cbindgen"/>, <xref
linkend="dbus-glib"/>, <xref linkend="gtk3"/>, <xref linkend="libnotify"/>,
<xref linkend="llvm"/> (with clang, used for bindgen even if using gcc),
<xref linkend="nodejs"/>, <xref linkend="pulseaudio"/> (or <xref
linkend="alsa-lib"/> if you edit the mozconfig; now deprecated by mozilla),
in either case please read the Configuration Information, <xref
linkend="python3"/> (rebuilt after installing <xref linkend="sqlite"/>),
<xref linkend="startup-notification"/>, <xref linkend="unzip"/>, <xref
linkend="yasm"/>, and <xref linkend="zip"/>
    </para>

    <bridgehead renderas="sect4">Recomendada</bridgehead>
    <para role="recommended">
      <xref linkend="icu"/>, <xref linkend="libevent"/>, <xref linkend="libvpx"/>,
<xref linkend="libwebp"/>, <xref linkend="nasm"/>, <xref linkend="nss"/>
    </para>

    <note>
      <para>
        If you don't install recommended dependencies, then internal copies of those
packages will be used. They might be tested to work, but they can be out of
date or contain security holes.
      </para>
    </note>

    <bridgehead renderas="sect4">Opcionais</bridgehead>
    <para role="optional">
      <xref linkend="curl"/>, <xref linkend="doxygen"/>, <xref role="runtime"
linkend="ffmpeg"/> (runtime, to play mov, mp3 or mp4 files), <xref
linkend="liboauth"/>, <xref linkend="valgrind"/>, <xref linkend="wget"/>,
<xref linkend="wireless_tools"/>, <ulink
url="https://github.com/libproxy/libproxy">libproxy</ulink>
    </para>

    <para condition="html" role="usernotes">
      User Notes: <ulink url="&blfs-wiki;/firefox"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Instalação de Firefox</title>

    <para>
      The configuration of <application>Firefox</application> is accomplished by
creating a <filename>mozconfig</filename> file containing the desired
configuration options. A default <filename>mozconfig</filename> is created
below. To see the entire list of available configuration options (and an
abbreviated description of some of them), issue <command>./mach configure
&amp;&amp; ./configure --help | less</command>. You may also wish to review
the entire file and uncomment any other desired options.  Create the file by
issuing the following command:
    </para>

<screen><userinput>cat &gt; mozconfig &lt;&lt; "EOF"
<literal># If you have a multicore machine, all cores will be used by default.

# If you have installed (or will install) wireless-tools, and you wish
# to use geolocation web services, comment out this line
ac_add_options --disable-necko-wifi

# API Keys for geolocation APIs - necko-wifi (above) is required for MLS
# Uncomment the following line if you wish to use Mozilla Location Service
#ac_add_options --with-mozilla-api-keyfile=$PWD/mozilla-key

# Uncomment the following line if you wish to use Google's geolocation API
# (needed for use with saved maps with Google Maps)
#ac_add_options --with-google-location-service-api-keyfile=$PWD/google-key

# startup-notification is required since firefox-78

# Uncomment the following option if you have not installed PulseAudio and
# want to use alsa instead
#ac_add_options --enable-audio-backends=alsa

# Comment out following options if you have not installed
# recommended dependencies:
ac_add_options --with-system-icu
ac_add_options --with-system-libevent
ac_add_options --with-system-libvpx
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --with-system-webp

# Unlike with thunderbird, although using the gold linker can
# save four megabytes in the installed file it does not make
# the build faster.

# libdavid (av1 decoder) requires nasm. Uncomment this if nasm
# has not been installed. Do not uncomment this if you have
# ffmpeg-5 installed.
#ac_add_options --disable-av1

# You cannot distribute the binary if you do this
ac_add_options --enable-official-branding

# Stripping is now enabled by default.
# Uncomment these lines if you need to run a debugger:
#ac_add_options --disable-strip
#ac_add_options --disable-install-strip

# Disabling debug symbols makes the build much smaller and a little
# faster. Comment this if you need to run a debugger. Note: This is
# required for compilation on i686.
ac_add_options --disable-debug-symbols

# The elf-hack is reported to cause failed installs (after successful builds)
# on some machines. It is supposed to improve startup time and it shrinks
# libxul.so by a few MB - comment this if you know your machine is not affected.
ac_add_options --disable-elf-hack

# The BLFS editors recommend not changing anything below this line:
ac_add_options --prefix=/usr
ac_add_options --enable-application=browser
ac_add_options --disable-crashreporter
ac_add_options --disable-updater
# enabling the tests will use a lot more space and significantly
# increase the build time, for no obvious benefit.
ac_add_options --disable-tests

# The default level of optimization again produces a working build with gcc.
ac_add_options --enable-optimize

ac_add_options --enable-system-ffi
ac_add_options --enable-system-pixman

ac_add_options --with-system-jpeg
ac_add_options --with-system-png
ac_add_options --with-system-zlib

# Using sandboxed wasm libraries has been moved to all builds instead
# of only mozilla automation builds. It requires extra llvm packages
# and was reported to seriously slow the build. Disable it.
ac_add_options --without-wasm-sandboxed-libraries

# The following option unsets Telemetry Reporting. With the Addons Fiasco,
# Mozilla was found to be collecting user's data, including saved passwords and
# web form data, without users consent. Mozilla was also found shipping updates
# to systems without the user's knowledge or permission.
# As a result of this, use the following command to permanently disable
# telemetry reporting in Firefox.
unset MOZ_TELEMETRY_REPORTING

mk_add_options MOZ_OBJDIR=@TOPSRCDIR@/firefox-build-dir</literal>
EOF</userinput></screen>

    <para>
      Compile <application>Firefox</application> by issuing the following
commands:
    </para>

    <para>
      A change in cbindgen-0.24.2 causes a symbol to now be output by cbindgen,
but it has already been defined in a header. This sed prevents the build
from eventually failing:
    </para>

<!-- Not needed with clang. Upstream bug at
     https://bugzilla.mozilla.org/show_bug.cgi?id=1729459

    <para>

      If building on a 32 bit machine, the following sed works around
      an issue with an incompatible <quote>double</quote> type in one
      header file:
    </para>

<screen><userinput>case "$(uname -m)" in
    i?86) sed -e '/typedef[ ]*double/s/double/long double/' \
              -i modules/fdlibm/src/math_private.h ;;
esac</userinput></screen>
-->
<screen><userinput>sed -i '/ROOT_CLIP_CHAIN/d' gfx/webrender_bindings/webrender_ffi.h</userinput></screen>


    <para>
      If the geolocation APIs are needed:
    </para>

    <note>
      <para>
        
        <!-- Taken from Arch Linux - an immensely helpful link - Thanks -->
<!-- BLFS Devs, register an account at Google with your
        @linuxfromscratch.org email address, and I'll make you an administrator
        for the 'Google APIs for LFS' project (where the API and OAuth keys
        were created for use in the book).-->
The Google and Mozilla API Keys below are specific to LFS. If using these
instructions for another distro, or if you intend to distribute binary
copies of the software using these instructions, please obtain your own keys
following the instructions located at <ulink
url="https://www.chromium.org/developers/how-tos/api-keys"/> and <ulink
url="https://location.services.mozilla.com/api"/> respectively.
        
      </para>
    </note>

<screen><userinput>echo "AIzaSyDxKL42zsPjbke5O8_rPVpVrLrJ8aeE9rQ" > google-key
echo "613364a7-9418-4c86-bcee-57e32fd70c23" > mozilla-key</userinput></screen>

    <note>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/mozshm.xml"/>

      <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/mozmach.xml"/>

    </note>
    
    <!-- Fixed in 102.8
    <para>

      First remove an obsolete flag in python code, that has been removed
      in python-3.11:
    </para>

<screen><userinput>grep -rl \"rU\" | xargs sed -i 's/"rU"/"r"/'</userinput></screen>

    <para>
      Then fix an issue with regular expressions in python-3.11:
    </para>

<screen><userinput>sed -e 's/?s)\./?s:.)/'               \
    -e '/?m)/{s/?m)/?m:/;s/\$"/$)"/}' \
    -e '/?s)%/{s/?s)/?s:/;s/?"/?)"/}' \
    -i xpcom/idl-parser/xpidl/xpidl.py</userinput></screen>
-->
<para>
      Now invoke the Python <command>mach</command> script to compile the package.
    </para>

<screen><userinput>export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=none &amp;&amp;
export MOZBUILD_STATE_PATH=${PWD}/mozbuild          &amp;&amp;
./mach configure                                    &amp;&amp;
./mach build</userinput></screen>

    <para>
      The <filename>mozconfig</filename> above disables the tests because they use
a lot more time and disk space for no obvious benefit. If you have
nevertheless enabled them, you can run the tests by executing
<command>./mach gtest</command>. This will require a network connection, and
to be run from within an Xorg session - there is a popup dialog when it
fails to connect to ALSA (that does not create a failed test).  One or two
tests will fail.  To see the details of the failure(s) you will need to log
the output from that command so that you can review it.
    </para>

    <para>
      Agora, como o(a) usuário(a) <systemitem class="username">root</systemitem>:
    </para>

<screen role="root"><userinput>MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=none ./mach install</userinput></screen>

    <para>
      Empty the environment variables which were set above:
    </para>

<screen><userinput>unset MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE MOZBUILD_STATE_PATH</userinput></screen>

  </sect2>

  <sect2 role="commands">
    <title>Explicações do Comando</title>



    <!--<xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../../xincludes/SIOCGSTAMP.xml"/>
-->
<para>
      <command>export MOZBUILD_STATE_PATH=${PWD}/mozbuild</command>: The build is
now supposed to tell you that it intends to create <filename
class="directory">~/.mozbuild</filename>, and offer you an option to press
&lt;ENTER&gt; to accept this, or Ctrl-C to cancel and restart the build
after specifying the directory. In practice, the message may not appear
until after &lt;ENTER&gt; is keyed, i.e. the build stalls.
    </para>

    <para>
      That directory is used for a (probably random) telemetry identifier.
Creating this in the build directory, and deleting that after the
installation, prevents it being used. If you wish to participate in
telemetry, export MOZBUILD_STATE_PATH to point to its default directory and
remove the entry from the <filename>mozconfig</filename>.
    </para>

    <para>
      <command>MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=none</command>: Use the
system python to create a virtual environment for <command>mach</command>
without downloading any python wheels nor using the system python modules.
This prevent version mismatches between system modules and bundled ones.
    </para>

    <para>
      <command>./mach configure</command>: This validates the supplied
dependencies and the <filename>mozconfig</filename>.
    </para>

    <para>
      <option>./mach build --verbose</option>: Use this alternative if you need
details of which files are being compiled, together with any C or C++ flags
being used. But do not add '--verbose' to the install command since it is
not accepted there.
    </para>

    <para>
      <option>./mach build -jN</option>: The build should, by default, use all the
online CPU cores. If using all the cores causes the build to swap because
you have insufficient memory, using fewer cores can be faster.
    </para>

    <para>
      <option><envar>CC=gcc CXX=g++</envar></option>: BLFS used to prefer to use
gcc and g++ instead of upstream's defaults of the
<application>clang</application> programs. With the release of gcc-12 the
build takes longer with gcc and g++, primarily because of extra warnings,
and is bigger. Set these environment variables <emphasis>before you run the
configure script</emphasis> if you wish to continue to use gcc,
g++. Building with GCC on i?86 is currently broken.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Configurando Firefox</title>

    <para>
      If you use a desktop environment like <application>Gnome</application> or
<application>KDE</application> you may want to create a
<filename>firefox.desktop</filename> file so that
<application>Firefox</application> appears in the panel's menus.  As the
&root; user:
    </para>

<screen role="root"><userinput>mkdir -pv /usr/share/applications &amp;&amp;
mkdir -pv /usr/share/pixmaps      &amp;&amp;

MIMETYPE="text/xml;text/mml;text/html;"                            &amp;&amp;
MIMETYPE+="application/xhtml+xml;application/vnd.mozilla.xul+xml;" &amp;&amp;
MIMETYPE+="x-scheme-handler/http;x-scheme-handler/https"           &amp;&amp;

cat &gt; /usr/share/applications/firefox.desktop &lt;&lt; EOF &amp;&amp;
<literal>[Desktop Entry]
Encoding=UTF-8
Name=Firefox Web Browser
Comment=Browse the World Wide Web
GenericName=Web Browser
Exec=firefox %u
Terminal=false
Type=Application
Icon=firefox
Categories=GNOME;GTK;Network;WebBrowser;
MimeType=$MIMETYPE
StartupNotify=true</literal>
EOF

unset MIMETYPE &amp;&amp;

ln -sfv /usr/lib/firefox/browser/chrome/icons/default/default128.png \
        /usr/share/pixmaps/firefox.png</userinput></screen>

    <sect3><title>Informação de Configuração</title>

      <para>
        The application settings for firefox are accessible by keying
<command>about:config</command> in the address bar.
      </para>

      <para>
        Occasionally, getting working sound in <application>firefox</application>
can be a problem.  Although upstream prefers pulseaudio, on balance using
<application>Alsa</application> may be easier.
      </para>

      <para>
        If you enabled <application>Alsa</application> for sound, you may need to
alter one variable to get working sound. If you run
<command>firefox</command> from a terminal and try to play something with
sound you might encounter error messages like:
      </para>

      <para>
         <literal>Sandbox: seccomp sandbox violation: pid 3941, tid 4030, syscall 16,
args 48 2147767296 139909894784796 0 0 0.</literal>
      </para>

      <para>
        That was on x86_64, on i686 the syscall number is 54. To allow this syscall,
in <command>about:config</command> change
<command>security.sandbox.content.syscall_whitelist</command> to 16 (or 54
if using i686).
      </para>

      <para>
        If you use <command>pulseaudio</command> in a Desktop Environment, it might
already be started by that DE.  But if it is not, although firefox-57
managed to start it, firefox-58 did not.  If you run
<command>firefox</command> from a terminal and this problem is present,
trying to play sound will encounter error messages warning <literal>Can't
get cubeb context!</literal>
      </para>

    <para>
      The fix for this is to close firefox, start pulseaudio to check it does
start (if not, read the information on Configuring in <xref
linkend="pulseaudio"/>) and restart firefox to check it is working.  If it
now works, add the following to your <filename>~/.xinitrc</filename>:
<phrase revision="sysv"> <literal>pulseaudio --verbose
--log-target=syslog&amp;</literal></phrase> <phrase revision="systemd">
<literal>pulseaudio --verbose --log-target=journald&amp;</literal></phrase>
(unfortunately, on some systems this does not work).
      </para>

      <para>
        You may wish to use multiple profiles within firefox. To do that, invoke
firefox as <command>firefox --ProfileManager</command>. You can also check
which profile is currently in use from <command>about:profiles</command>.
      </para>

      <para>
        Although WebRender (using the GPU for compositing) is not used by default,
it now appears to work well on supported hardware (ATI, Nvidia and Intel
GPUs with Mesa-18 or later). For an explanation, please see <ulink
url="https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/">hacks.mozilla.org</ulink>.
The only downside seems to be that on a machine with limited RAM it might
use more RAM.
     </para>

    <para>
      To check if WebRender is being used, look in about:support. In the Graphics
section, Compositing will either show 'Basic' (i.e. not in use) or
'WebRender'. To enable it, go to about:config and change gfx.webrender.all
to True. You will need to restart firefox.
    </para>

    <para>
      It may be useful to mention the processes from firefox which can appear in
<command>top</command> - as well as firefox itself, there may be multiple
Web Content processes, and now an RDD Process (Remote Data Decoder) which
appears when playing web videos encoded with av1 (libdav1d). If WebRender
has been enabled, a GPU Process will also appear when firefox has to repaint
(e.g. scrolling, opening a new tab, or playing a video).
    </para>

    </sect3>
  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Aplicativos Instalados</segtitle>
      <segtitle>Bibliotecas Instaladas</segtitle>
      <segtitle>Diretório Instalado</segtitle>

      <seglistitem>
        <seg>
          firefox
        </seg>
        <seg>
          Numerous libraries, browser components, plugins, extensions, and helper
modules installed in /usr/lib/firefox
        </seg>
        <seg>
          /usr/lib/firefox
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descrições Curtas</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="firefox-prog">
        <term><command>firefox</command></term>
        <listitem>
          <para>
            is a <application>GTK+-3</application> internet browser that uses the
Mozilla Gecko rendering engine
          </para>
          <indexterm zone="firefox firefox-prog">
            <primary sortas="b-firefox">firefox</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
