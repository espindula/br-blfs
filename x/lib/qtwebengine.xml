<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY qtwebengine-major "5.15">
<!-- URL if there is a public release
  <!ENTITY qtwebengine-download-http "https://download.qt.io/archive/qt/&qtwebengine-major;/&qtwebengine-version;/submodules/qtwebengine-everywhere-src-&qtwebengine-version;.tar.xz">
     URL for a prepared git version -->
  <!ENTITY qtwebengine-download-http "&sources-anduin-http;/qtwebengine/qtwebengine-&qtwebengine-version;.tar.xz">
  <!ENTITY qtwebengine-download-ftp  "">
  <!ENTITY qtwebengine-md5sum        "296f61f84a489088ffd237fbcd052c9e">
  <!ENTITY qtwebengine-size          "307 MB">
  <!ENTITY qtwebengine-buildsize     "5.1 GB (153 MB installed)">
  <!ENTITY qtwebengine-time          "73 SBU (Using parallelism=4)">
]>

<sect1 id="qtwebengine" xreflabel="qtwebengine-&qtwebengine-version;">
  <?dbhtml filename="qtwebengine.html"?>


  <title>QtWebEngine-&qtwebengine-version;</title>

  <indexterm zone="qtwebengine">
    <primary sortas="a-qtwebengine">qtwebengine</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introdução ao <quote>QtWebEngine</quote></title>

    <para>
      &quot;<application>QtWebEngine</application>&quot; integra os recursos
&quot;web&quot; do &quot;<application>chromium</application>&quot; no
&quot;Qt&quot;. Ele vem com a própria cópia dele do &quot;ninja&quot;, a
qual usa para a construção se não conseguir encontrar uma cópia de sistema,
e várias cópias de bibliotecas originárias do &quot;ffmpeg&quot;,
&quot;icu&quot;, &quot;libvpx&quot; e &quot;zlib&quot; (incluindo
&quot;libminizip&quot;), as quais foram bifurcadas pelos(as)
desenvolvedores(as) do &quot;<application>chromium</application>&quot;.
    </para>

    <para>
      Esse pacote, e os navegadores que o usam, possivelmente seja útil se você
precisar usar um sítio da &quot;web&quot; projetado para navegadores
&quot;Chrome&quot; ou &quot;Chromium&quot; da &quot;Google&quot;.
    </para>

    <important>
      <para>
        Qt-5.15 reached End Of Life on 26 May 2023. Extended lifetime Qt5.15 LTS has
been extended until 26th May 2025 for those with subscription licenses.
Because qtwebengine uses chromium code under the LGPL, it appears that any
new backported CVE fixes for QtWebEngine will be available after Qt makes
public releases of its current versions.
      </para>
    </important>

    <warning>
      <para>
        &quot;QtWebEngine&quot; usa uma cópia bifurcada do &quot;Chromium&quot; e,
portanto, é vulnerável a muitos problemas encontrados lá. Os(As)
desenvolvedores(as) do &quot;Qt&quot; sempre tem preferido fazer lançamentos
ao mesmo tempo que o resto do &quot;Qt&quot; (em vez de adicionar correções
de emergência), mas com versões estáveis sendo lançadas depois da versão
atual de desenvolvimento. Agora que eles(as) desejam migrar para o
&quot;Qt6&quot;, os lançamentos 5.15.3 e posteriores do &quot;Qt-5.15&quot;
estão inicialmente disponíveis somente para clientes
pagantes. &quot;QtWebEngine&quot; é uma exceção por causa da licença
&quot;LGPL&quot; dele, mas levar os fontes &quot;git&quot; (com o submódulo
bifurcado do &quot;Chromium&quot;) para uma posição onde eles sejam
construídos com sucesso em um sistema atual do BLFS pode exigir muito
esforço e, portanto, atualizações para o livro possivelmente sejam
atrasadas.
      </para>

      <para>
        Parece provável que as futuras versões da série 5.15 também serão lançadas
muito depois das vulnerabilidades do &quot;Chromium&quot; serem conhecidas,
mas correções para o &quot;QtWebEngine&quot; podem ser encontradas no
&quot;git&quot; e os(as) editores(as) consideram que as vulnerabilidades
conhecidas nos navegadores deveriam ser corrigidas.
      </para>

      <para> 
        <!-- for git versions -->
The tarball linked to below was created from the 5.15.15 git branch and the
87-branch of the chromium submodule (which is forked from chromium). See the
GIT-VERSIONS file in the tarball for details of the latest commits.
      </para>
    </warning>

    

    <!-- note for editors on obtaining webengine from git.
      First (if you do not already have a past version)
      git clone git://code.qt.io/qt/qtwebengine.git
      git submodule init -
       that will report qtwebengine-chromium.git registered for src/3rdparty
       now find the main branch names:
      git fetch origin
      git branch -r
       after a release is prepared (even if the rest is not public), the 5.15
       branch now seems to get updated and might be what you want. But in the
       approach to 5.15.6 the backported CVE and other security fixes were only
       applied to 5.15.6.  So, assuming that a 5.15.7 branch now exists,
      git checkout origin/5.15.7
       Confirm that HEAD is where you expected.
       Now go to src/3rdparty
      git fetch origin
      git branch -r
       The required branch is likely to be 87-branch unless there is a newer one
      mentioned in the 5.15 cgit web page (below).
      git checkout origin/87-branch (or whatever)
       Use git log or git tk to look at its HEAD and check it seems appropriate.
       If this doesn't work, use 'git submodule update'

      To decide when it might be worth creating a new tarball, periodically keep
      an eye on https://code.qt.io/cgit/qt/qtwebengine.git/ (currently, the 5.15.6
      branch, 5.15.7 might get used later). The interesting items are CVE fixes
      for known chromium vulnerabilities, as well as numbered Security bugs -
      again, these relate to chromium.

      When I noticed some updates in late March I was searching for one of the
      CVEs mentioned, and google found a link to a review page for Michael Brüning
      at https://codereview.qt.nokia.com/q/owner:michael.bruning%2540qt.io. At that
      time I could see various unmerged items, so I waited. The items for the
      90-based chromium module are not relevant to 5.15-series (possibly they will
      be for qtwebengine-6+). Review queues for other Qt employees might be found
      in a similar way, but remember that everythng EXCEPT qtwebengine and chromium
      is private to Qt until they choose to release it.

      NOTE: the 3rdparty/chromium tree may contain more patches than have been
      merged into the current 5.15.x branch. Any patches after what was in the
      last 'update chromium' merge in qtwebengine occasionally break the build.

      After merging the contents of the qtwebengine and src/3rdparty git extracts,
      in the top level please create a GIT-VERSIONS file summarising the HEAD
      commits of both parts, as a reminder of where we are up to. I've nove added
      a CVE-fixes to keep track of what has been fixed (comits before 5.15.2 did not
      mention the CVEs until they were detailed in a release).

      Now create tarballs - 'git archive' does not work across submodule boundaries,
      so you need to create one archive from the top of qtwebengine/ and another
      from the top of src/3rdparty (chromium, gn, ninja are apparently all part of
      the qtwebengine-chromium module).  Then in a work area untar the qtwebengine
      tarball, go down to src/3rdparty and untar the submodule tarball.
      Decide on what to call the result and create a full xz tarball using tar -cJf.

      NOTE: To use git archive, use something like this:
      git archive - -format tar.gz - -output qtwebengine.tar.gz HEAD
      git archive - -format tar.gz - -output chromium.tar.gz HEAD

      UPDATE: Since we have to host the tarball, and it is over 300MB, it makes
      sense to create a patch for subsequent fixes (for the first version, 314KB
      including the updates to the GIT-VERSIONS file).  For future updates, view
      the current updates patch to see the previous commits. When the new commits
      have been applied, rename the updated version to 'b', but untar the
      unpatched tarball as 'a' and then diff a to b in the usual manner to get
      all updates since the tarball was created.

      For our own releases, probably best to create a fresh tarball.

         end of note for editors -->
&lfs120_checked;

    <warning>
      <para>
        By default, ninja will use all online CPUs +2 (if at least 4 exist), even if
they are not available to the current task because the build terminal has
been restricted with 'taskset'.  In BLFS, this package takes more time to
build than any other.  In one example, the build of this package crashed at
about the 90 percent point due to an out of memory problem on a system with
24 cores and 32 GB of memory.
      </para>

      <para>
        Para contornar isso, vejam-se as Explicações do Comando abaixo.
      </para>
    </warning>

    <note>
      <para>
        Se estiver atualizando e tiver instalado uma versão mais recente do
&quot;<xref linkend='icu'/>&quot; desde a última instalação do &quot;<xref
linkend='qt5'/>&quot;, [então] você precisará reinstalar o &quot;Qt5&quot;
antes de atualizar, caso contrário, o link final desse pacote falhará com um
aviso de que a versão das bibliotecas &quot;icu&quot; necessárias para
&quot;libQt5Core.so&quot; possivelmente conflitem com a versão usada para
esse pacote.
      </para>

      <para>
        Excepcionalmente, o sistema de construção &quot;GN&quot; fornecido (usado
para criar os arquivos &quot;Ninja&quot;) exige uma &quot;<filename
class="libraryfile">libstdc++.a</filename>&quot; estática, embora as
bibliotecas instaladas usem corretamente a versão compartilhada. Se essa
biblioteca estática não estiver presente, [então] a construção falhará muito
rapidamente. Por favor, observe que se você tentar construir o
&quot;webengine&quot; como parte do
&quot;<application>Qt</application>&quot; e a biblioteca estática não
estiver disponível, [então] essa construção será, ou concluída sem instalar
o &quot;webengine&quot; ou, do contrário, falhará durante a instalação
(ambas as variantes foram observadas em 5.12 .0).
      </para>
    </note>

    <bridgehead renderas="sect3">Informação do Pacote</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência (HTTP): <ulink url="&qtwebengine-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Transferência (FTP): <ulink url="&qtwebengine-download-ftp;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Soma de verificação MD5 da transferência: &qtwebengine-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &qtwebengine-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &qtwebengine-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Tempo de construção estimado: &qtwebengine-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Transferências Adicionais</bridgehead>
    <itemizedlist spacing="compact">
  
      <!--<listitem>

        <para>
          Required patch:
          <!\-\- keep links for releases and git versions as a reminder
               that the tarball names names differ
          <ulink url="&patch-root;/qtwebengine-everywhere-src-&qtwebengine-version;-ICU68-2.patch"/> \-\->

          <ulink url="&patch-root;/qtwebengine-&qtwebengine-version;-5.15.7-1.patch"/>
        </para>
      </listitem>-->
<listitem>
        <para>
          Remendo exigido: <ulink
url="&patch-root;/qtwebengine-&qtwebengine-version;-build_fixes-1.patch"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Remendo exigido: <ulink
url="&patch-root;/qtwebengine-&qtwebengine-version;-ffmpeg5_fixes-1.patch"/>
        </para>
      </listitem>
      
    <!--
      <listitem>

        <para>
          Required patch:
          <ulink url="&patch-root;/qtwebengine-&qtwebengine-version;-icu_73-1.patch"/>
        </para>
      </listitem>
      -->
</itemizedlist>

    <bridgehead renderas="sect3">Dependências do &quot;qtwebengine&quot;</bridgehead>

    <bridgehead renderas="sect4">Exigidas</bridgehead>
      
    <!-- the qmake output tends to be misleading. 'khr' is from Mesa -->
<para role="required">
      <!--  <xref linkend="python2"/>
, and -->
<xref linkend="nodejs"/>, <xref linkend="nss"/>, <xref linkend="pciutils"/>,
and (<xref linkend='qt5'/> or <xref role="nodep" linkend='qt5-components'/>
with qtlocation and qtwebchannel)
    </para>

    <bridgehead renderas="sect4">Recomendadas</bridgehead>
    <note>
      <para>
        Se esses pacotes não estiverem instalados, [então] o processo de construção
compilará e instalará a própria versão dele (talvez mais antiga), com o
efeito colateral de aumentar a construção e espaço instalado em disco e o
tempo de construção.
      </para>
    </note>

    <para role="recommended">
      <!-- awkward wording - libxslt needs libxml2, if libxml2 is built
           before icu then the *shipped* icu will be used -->
either <xref linkend="alsa-lib"/> or <xref linkend="pulseaudio"/> (or both),
<xref linkend="ffmpeg"/>, <xref linkend="icu"/> (built before <xref
linkend="libxml2"/>) , <xref linkend="libwebp"/>, <xref linkend="libxslt"/>,
and <xref linkend="opus"/>
    </para>

    <bridgehead renderas="sect4">Opcionais</bridgehead>
    <para role="optional">
      <xref linkend="libevent"/>, <xref linkend="mitkrb"/>, <xref
linkend="pipewire"/>, <xref linkend="poppler"/>, <ulink
url="https://github.com/open-source-parsers/jsoncpp/releases">jsoncpp</ulink>,
<ulink url="https://github.com/cisco/libsrtp/releases">libsrtp</ulink>,
<ulink url="https://google.github.io/snappy/">snappy</ulink>
    </para>

    <para condition="html" role="usernotes">
      Editor Notes: <ulink url="&blfs-wiki;/qtwebengine"/>
    </para>
  </sect2>

  <sect2 role="installation">
    <title>Instalação do <quote>qtwebengine</quote></title>







    <!-- following merely commented instead of deleted, in case we need to
      drop back when a future version of python3 is released -->
<!--<note>

      <para>
        Unlike version 5.15.2, the chromium-derived build system now needs
        <command>python</command> to be available and to be python2. In
        BLFS-10.1 the creation of the python symlink was removed as a step
        towards eventually getting rid of python2 (other old packages which
        need python2 usually work by invoking python2). If you are still
        using an earlier version of BLFS where
        <filename>/usr/bin/python</filename> exists, you can skip the
        commands to create the symlink, and to later remove it.
      </para>
    </note>

    <para>
      First, as the <systemitem class="username">root</systemitem>
      user, create the python symlink:
    </para>

<screen role="root"><userinput>ln -svf /usr/bin/python{2,}</userinput></screen>-->
<!--<para>

      Now apply a patch to update from 5.15.6 to the security and other fixes
      contained in the 5.15.7 source:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-5.15.7-1.patch</userinput></screen>-->
<para>
      Aplique um remendo para corrigir vários problemas que podem impedir a
construção de completar e para forçá-la a usar o &quot;python3&quot;:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-build_fixes-1.patch</userinput></screen>

    <para>
      Apply a patch that resolves problems when building with ffmpeg-5 and later:
    </para>

<!--
    <para>

      Apply a patch that resolves problems when building with icu-73 and later:
    </para>

<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-icu_73-1.patch</userinput></screen>

-->
<!-- start of commands for git versions only -->
<screen><userinput remap="pre">patch -Np1 -i ../qtwebengine-&qtwebengine-version;-ffmpeg5_fixes-1.patch</userinput></screen>


    <para>
      Embora o remendo &quot;build_fixes&quot; tenha garantido que o
&quot;git&quot; não seja invocado durante a construção, o sistema de
construção tem regras labirínticas de complexidade bizantina e, em
particular, tentar construir sem dois diretórios
&quot;<filename>.git</filename>&quot; o levará a eventualmente cair em
código inesperado e não construível que referencia um cabeçalho privado que
não foi criado. Evite isso criando os diretórios exigidos:
    </para>

<screen><userinput>mkdir -pv .git src/3rdparty/chromium/.git</userinput></screen>

    <para>
      Como essa versão do &quot;qtwebengine&quot; se destina a um lançamento
posterior aos lançamentos públicos atuais, mude-a para construir para
&quot;qt-&qt5-version;&quot; usando um &quot;sed&quot;:
    </para>

<!-- end of commands for git versions only -->
<screen><userinput>sed -e '/^MODULE_VERSION/s/5.*/&qt5-version;/' -i .qmake.conf</userinput></screen>


    <para>
      Agora, certifique-se de que os cabeçalhos locais estejam disponíveis quando
não construir como parte do &quot;<xref linkend="qt5"/>&quot; completo:
    </para>

<screen><userinput>find -type f -name "*.pr[io]" |
   xargs sed -i -e 's|INCLUDEPATH += |&amp;$$QTWEBENGINE_ROOT/include |'</userinput></screen>

    <para>
      Em seguida, permita que a biblioteca &quot;pulseaudio&quot; seja vinculada
em tempo de construção, em vez de em tempo de execução. Isso também evita um
problema com o &quot;pulseaudio&quot; mais recente:
    </para>

<screen><userinput>sed -e '/link_pulseaudio/s/false/true/' \
     -i src/3rdparty/chromium/media/media_options.gni</userinput></screen>

    <para>
      A seguir, corrija as ferramentas de construção, de forma que elas possam ser
executadas com &quot;Python-3.11+&quot;:
    </para>

<screen><userinput>sed -e 's/\^(?i)/(?i)^/' \
     -i src/3rdparty/chromium/tools/metrics/ukm/ukm_model.py &amp;&amp;
sed -e "s/'rU'/'r'/" \
     -i src/3rdparty/chromium/tools/grit/grit/util.py</userinput></screen>

    <para>
      Finalmente, corrija uma mudança no sistema de construção que permite que
os(as) desenvolvedores(as) dele passem, por exemplo, &quot;-j20&quot; para o
&quot;make&quot; (para testes rápidos de algumas áreas), mas quebra a
construção com o uso do LFS da variável de ambiente &quot;NINJAJOBS&quot;:
    </para>



<!-- now that we always install this as 5.15.2, this seems to be redundant
    <para>

      If an older version of the package's main library has been installed,
      when the package is built separately it will link to that in preference
      to its own not-yet-installed version, and fail because of missing symbols.
      Prevent that by, as the <systemitem class="username">root</systemitem>
      user, moving the symlink out of the way:
    </para>

<screen role="root"><userinput>if [ -e ${QT5DIR}/lib/libQt5WebEngineCore.so ]; then
  mv -v ${QT5DIR}/lib/libQt5WebEngineCore.so{,.old}
fi</userinput></screen>-->
<!--<para>

      The last fix is needed to build with gcc-12:
    </para>

<screen><userinput>sed -e '/#include/i#include &lt;vector&gt;' \
    -i src/3rdparty/chromium/third_party/skia/src/utils/SkParseColor.cpp</userinput></screen>-->
<screen><!-- editors: See thread at
http://lists.linuxfromscratch.org/pipermail/blfs-dev/2019-December/036996.html
et.seq, particularly 037002.html which shows the commit near the end. -->
<userinput>sed -i 's/NINJAJOBS/NINJA_JOBS/' src/core/gn_run.pro</userinput></screen>





    <para>
      Instale o &quot;<application>qtwebengine</application>&quot; executando os
seguintes comandos:
    </para>

<!--
    <para>

      if you wish to build the HTML documentation, issue:
    </para>

<screen><userinput>make docs</userinput></screen>
-->
<screen><userinput>mkdir build &amp;&amp;
cd     build &amp;&amp;
qmake .. -- -system-ffmpeg -proprietary-codecs -webengine-icu &amp;&amp;
make</userinput></screen>


    <para>
      Esse pacote não vem com uma suíte de teste.
    </para>

    <para>
      Agora, como o(a) usuário(a) &quot;<systemitem
class="username">root</systemitem>&quot;:
    </para>

<!-- EDITORS NOTE: If you are updating this package, use INSTALL_ROOT=
         instead of DESTDIR= -->
<!--
    <para>

      If you built the HTML documentation, install it with:
    </para>

<screen role="root"><userinput>make install_docs</userinput></screen>
-->
<screen role="root"><userinput>make install</userinput></screen>

    

    <para>
      Remova referências ao diretório de construção dos arquivos instalados de
dependência de biblioteca (&quot;prl&quot;) executando os seguintes comandos
como o(a) usuário(a) &quot;<systemitem
class="username">root</systemitem>&quot;:
    </para>

<!--<para>

      Finally, as the <systemitem class="username">root</systemitem>
      user, remove the python symlink:
    </para>

<screen role="root"><userinput>rm -v /usr/bin/python</userinput></screen>-->
<screen role="root"><userinput>find $QT5DIR/ -name \*.prl \
    -exec sed -i -e '/^QMAKE_PRL_BUILD_DIR/d' {} \;</userinput></screen>


  </sect2>

  <sect2 role="commands">
    <title>Explicações do Comando</title>

    <para>
      <command>qmake</command>: Isso construirá a cópia incluída do
&quot;<application>ninja</application>&quot; se ele já não estiver instalado
e a usará para configurar a construção.
    </para>

    <para>
      <command>-- -system-ffmpeg -proprietary-codecs -webengine-icu</command>: Se
quaisquer opções forem passadas para o &quot;qmake&quot;, [então] elas
precisam vir depois de &quot;--&quot; que precisa seguir &quot;..&quot; que
aponta para o diretório principal. As opções aqui fazem com que ele use o
&quot;ffmpeg&quot; do sistema e o &quot;icu&quot; do sistema. A opção
&quot;-proprietary-codecs&quot; permite que o &quot;ffmpeg&quot; decodifique
os codificadores &quot;H264&quot; e &quot;H265&quot;. Se construído como
parte do &quot;Qt5&quot; completo, [então] o &quot;icu&quot; do sistema será
usado automaticamente (somente) pelo &quot;Qt5Core&quot; se ele estiver
disponível, mas, a menos que essa opção seja usada, o &quot;webengine&quot;
sempre usará a cópia dele enviada do &quot;icu&quot;, adicionando tempo e
espaço à construção.
    </para>

    <para>
      <option>-webengine-jumbo-build 0</option>: Se isso for adicionado ao comando
&quot;qmake&quot;, [então] fará com que o &quot;Jumbo Build Merge
Limit&quot; seja informado como &quot;no&quot; em vez de oito (08). Isso
desliga a construção &quot;jumbo&quot;. Algumas distribuições fazem isso
para obter uma construção menor em algumas arquiteturas como
&quot;MIPS&quot;. No &quot;x86_64&quot; pode economizar um pouco de espaço
na construção, mas o tempo de construção aumentará muito.
    </para>

    <para>
      <option>-webengine-kerberos</option>: Adicione isso se tiver instalado o
&quot;<xref linkend="mitkrb"/>&quot; e desejar se conectar a partir de um
navegador usando o &quot;QtWebEngine&quot; a um servidor &quot;web&quot; que
exija que você se conecte via &quot;kerberos&quot;.
    </para>

    

    <!--
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
       href="../../xincludes/SIOCGSTAMP.xml"/>

    -->
<para>
      <option>NINJAJOBS=4 make</option>: Se você remendou o &quot;ninja&quot; do
sistema no LFS para reconhecer a variável de ambiente &quot;NINJAJOBS,&quot;
[então] esse comando executará o &quot;ninja&quot; do sistema com o número
especificado de tarefas (ou seja, quatro). Existem várias razões pelas quais
você poderia querer usar opções como essa:
    </para>

      <itemizedlist>
        <listitem>
          <para>
            Construir em um subconjunto de &quot;CPUs&quot; permite medir o tempo de
construção para um número menor de processadores e (ou) executar outras
tarefas com uso intensivo da &quot;CPU&quot; ao mesmo tempo. Para um(a)
editor(a) em uma máquina com muitas &quot;CPUs&quot;, tentando medir o tempo
de construção para uma máquina com quatro &quot;CPUs&quot;,
&quot;<option>NINJAJOBS=4 make</option>&quot; fornecerá uma aproximação
razoável (existe um curto período onde N+2 tarefas &quot;python&quot; e
&quot;node&quot; executam).
          </para>
        </listitem>
        <listitem>
          <para>
            Em uma máquina com somente quatro &quot;CPUs&quot; &quot;online&quot;, o
padrão de agendamento de tarefas N+2 para o &quot;qtwebengine&quot; é mais
lento entre três por cento (3%) e sete por cento (7%), provavelmente devido
ao tamanho dos arquivos&quot; C++&quot; e às muitas inclusões e modelos
deles. Portanto, se em dúvida, [então] configure &quot;NINJAJOBS&quot; para
o número de &quot;CPUs&quot;.
          </para>
        </listitem>
        <listitem>
          <para>
            Reduzindo o número de núcleos sendo usados em execução prolongada, os
pacotes com uso intensivo de &quot;CPU&quot; possivelmente aliviem os
problemas de aquecimento.
          </para>
        </listitem>
        <listitem>
          <para>
            Reduzir o número de núcleos evitará potenciais problemas de falta de memória
em sistemas que não tenham memória suficiente (ou troca) quando todos os
núcleos estiverem ativos. Uma abordagem sugerida é a de limitar o número de
núcleos a cerca de um núcleo para cada 1,5 GB de &quot;RAM&quot; e espaço de
troca combinados.
          </para>
        </listitem>
      </itemizedlist>

  </sect2>

  <sect2 role="configuration">
    <title>Configurando o <quote>QtWebEngine</quote></title>

    <sect3 id="qtwebengine-config">
      <title>Informação de Configuração</title>

      <para>
        Se estiver atualizando a partir de uma versão secundária mais antiga desse
aplicativo, [então] para algumas páginas da &quot;Web&quot; carregarem, você
possivelmente precise limpar os &quot;caches&quot; do
<emphasis>navegador</emphasis>; por exemplo. para o
&quot;<application>falkon</application>&quot; eles serão encontrados em
&quot;<filename class="directory">~/.cache/falkon/</filename>&quot;. Você
precisará fazer isso se o navegador começar a renderizar a página e então
mudar para uma guia em branco com uma mensagem de que algo deu errado e um
botão para Tentar novamente. Mesmo depois de remover os &quot;caches&quot;
antigos, você possivelmente precise tentar novamente algumas vezes para cada
guia afetada.
      </para>

      <para>
        Se um navegador usando esse pacote falhar ao executar e quando executado a
partir de um terminal ele informar &quot;Trace/breakpoint trap&quot;, isso
provavelmente é um problema de configuração do núcleo - não existe
necessidade de reconstruir o &quot;QtWebEngine&quot;; veja-se a próxima
seção, recompile o núcleo e reinicie para o novo núcleo.
      </para>

    </sect3>

  </sect2>

  <sect2 role="kernel" id="qtwebengine-kernel">
    <title>Configuração do Núcleo</title>

    <para>
      Esse pacote não exige nenhum dos itens opcionais de espaço de nome do
núcleo, mas se o espaço de nome de Usuário(a) estiver habilitado <phrase
revision="systemd">, (como acontece em alguns arquivos de unidade, para
proteção)</phrase>, [então] o espaço de nome de &quot;PID&quot; também
precisa ser habilitado. Nesse caso, habilite as seguintes opções na
configuração do núcleo e recompile o núcleo se necessário:
    </para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="qtwebengine-kernel.xml"/>

    <indexterm zone="qtwebengine qtwebengine-kernel">
      <primary sortas="d-qtwebengine">qtwebengine</primary>
    </indexterm>
  </sect2>

  <sect2 role="content">
    <title>Conteúdo</title>

    <segmentedlist>
      <segtitle>Aplicativos Instalados</segtitle>
      <segtitle>Bibliotecas Instaladas</segtitle>
      <segtitle>Diretórios Instalados</segtitle>

      <seglistitem>
        <seg>
          qtwebengine_convert_dict and QtWebEngineProcess (in $QT5DIR/libexec)
        </seg>
        <seg>
          libQt5Pdf.so, libQt5PdfWidgets.so, libQt5WebEngineCore.so,
libQt5WebEngine.so, and libQt5WebEngineWidgets.so
        </seg>
        <seg>
          $QT5DIR/include/QtPdf, $QT5DIR/include/QtPdfWidgets,
$QT5DIR/include/QtWebEngine, $QT5DIR/include/QtWebEngineCore,
$QT5DIR/include/QtWebEngineWidgets, $QT5DIR/qml/QtWebEngine, and
$QT5DIR/translations/qtwebengine_locales
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Descrições Curtas</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="qtwebengine_convert_dict">
        <term><command>qtwebengine_convert_dict</command></term>
        <listitem>
          <para>
            converte dicionários do &quot;hunspell&quot;
(&quot;<literal>.dic</literal>&quot;) para o formato do &quot;chromium&quot;
(&quot;<literal>.bdic</literal>&quot;)
          </para>
          <indexterm zone="qtwebengine qtwebengine_convert_dict">
            <primary sortas="b-qtwebengine_convert_dict">qtwebengine_convert_dict</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="QtWebEngineProcess">
        <term><command>QtWebEngineProcess</command></term>
        <listitem>
          <para>
            é um aplicativo &quot;libexec&quot; que executa um processo zigoto (aquele
que escuta solicitações de gerar a partir de um processo mestre e se bifurca
em resposta)
          </para>
          <indexterm zone="qtwebengine QtWebEngineProcess">
            <primary sortas="b-QtWebEngineProcess">QtWebEngineProcess</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngine-lib">
        <term><filename class="libraryfile">libQtWebEngine.so</filename></term>
        <listitem>
          <para>
            fornece tipos &quot;QML&quot; para renderizar conteúdo da web dentro de um
aplicativo &quot;QML&quot;
          </para>
          <indexterm zone="qtwebengine libQtWebEngine-lib">
            <primary sortas="c-libQtWebEngine">libQtWebEngine.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngineCore">
        <term><filename class="libraryfile">libQtWebEngineCore.so</filename></term>
        <listitem>
          <para>
            fornece &quot;API&quot; pública compartilhada por &quot;QtWebEngine&quot; e
&quot;QtWebEngineWidgets&quot;
          </para>
          <indexterm zone="qtwebengine libQtWebEngineCore">
            <primary sortas="c-libQtWebEngineCore">libQtWebEngineCore.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libQtWebEngineWidgets">
        <term><filename class="libraryfile">libQtWebEngineWidgets.so</filename></term>
        <listitem>
          <para>
            fornece um mecanismo de navegador da &quot;web&quot;, bem como classes
&quot;C++&quot; para renderizar e interagir com o conteúdo da
&quot;web&quot;
          </para>
          <indexterm zone="qtwebengine libQtWebEngineWidgets">
            <primary sortas="c-libQtWebEngineWidgets">libQtWebEngineWidgets.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>
  </sect2>

</sect1>
