<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY certhost              "https://hg.mozilla.org/">
  <!ENTITY certpath              "/lib/ckfw/builtins/certdata.txt">
  <!ENTITY make-ca-buildsize     "6.9 MB (with all runtime deps)">
  <!ENTITY make-ca-time          "0,1 UPC (com todas as dependências em tempo de execução)">

  <!ENTITY make-ca-download      "https://github.com/lfs-book/make-ca/releases/download/v&make-ca-version;/make-ca-&make-ca-version;.tar.xz">
  <!ENTITY make-ca-size          "36 KB">
  <!ENTITY make-ca-md5sum        "67e0b911e73a859fc326171c5153d455">
]>

<sect1 id="make-ca" xreflabel="make-ca-&make-ca-version;">
  <?dbhtml filename="make-ca.html"?>


  <title>make-ca-&make-ca-version;</title>
  <indexterm zone="make-ca">
    <primary sortas="a-make-ca">make-ca</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introdução a make-ca</title>

    <para>
      A Infraestrutura de Chave Pública (ICP) é um método para validar a
autenticidade de uma entidade desconhecida ao longo de redes de comunicação
não confiáveis. A ICP funciona estabelecendo uma cadeia de confiança, em vez
de confiar explicitamente em cada dispositivo individual ou entidade. Para a
finalidade de um certificado apresentado por uma entidade remota ser
acreditado, esse certificado precisa apresentar uma cadeia completa de
certificados que possa ser validada usando-se o certificado raiz de uma
Autoridade Certificadora (AC) que é acreditada pela máquina local.
    </para>

    <para>
      Estabelecer confiança com uma AC envolve validar coisas como endereço da
companhia, propriedade, informação de contato, etc., e assegurar que a AC
tenha seguido as melhores práticas, tais como se submeter a auditorias
periódicas de segurança por investigadores(as) independentes e manter uma
sempre disponível lista de revogação de certificado. Isso está bem fora do
escopo do BLFS (como está para a maior parte das distribuições do Linux). A
loja de certificado fornecida aqui é tomada a partir da Fundação Mozilla,
que estabeleceu políticas de inclusão muito estritas descritas <ulink
url="https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/">aqui</ulink>.
    </para>

    &lfs113_checked;

    <bridgehead renderas="sect3">Informação do Pacote</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Transferência (HTTP): <ulink url="&make-ca-download;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Tamanho da transferência: &make-ca-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Somas de verificação MD5 da transferência: &make-ca-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Espaço em disco estimado exigido: &make-ca-buildsize;
        </para>
      </listitem>
      <listitem>
        <para>
          Tempo de construção estimado: &make-ca-time;
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Dependências do make-ca</bridgehead>

    <bridgehead renderas="sect4">Exigida</bridgehead>
    <para role="required">
      <xref linkend="p11-kit"/> (exigido em tempo de execução para gerar lojas de
certificado a partir de âncoras de confiança)
    </para>
    

   <!-- /usr/bin/trust is needed to extract the certs to /etc/ssl/certs -->
<bridgehead renderas="sect4">Opcional (tempo de execução)</bridgehead>
    <para role="optional">
      <xref role="runtime" linkend="nss"/> (para gerar um NSSDB compartilhado)
    </para>

    <para condition="html" role="usernotes">Observações de Usuário(a): <ulink url='&blfs-wiki;/make-ca'/></para>
  </sect2>

  <sect2 role="installation">
    <title>Instalação do make-ca</title>

    <para>
      O script <application>make-ca</application> baixará e processará os
certificados incluídos no arquivo <filename>certdata.txt</filename> para uso
como âncoras de confiança para o módulo de confiança <xref
linkend="p11-kit"/>. Adicionalmente, gerará lojas de certificado do sistema
usadas pelos aplicativos do BLFS (se os aplicativos recomendados e os
opcionais estiverem presentes no sistema). Quaisquer certificados locais
armazenados em <filename>/etc/ssl/local</filename> serão importados para
ambos: as âncoras de confiança; e as lojas de certificado geradas
(substituindo a confiança do Mozilla). Adicionalmente, quaisquer valores de
confiança modificados serão copiados a partir das âncoras de confiança para
<filename>/etc/ssl/local</filename> antes de quaisquer atualizações,
preservando os valores de confiança personalizados que divergirem do Mozilla
quando se usar o utilitário <command>trust</command> oriundo do
<application>p11-kit</application> para operar sobre a loja de confiança.
    </para>

    <para>
      Para instalar as várias lojas de certificados, primeiro instale o script
<application>make-ca</application> no local correto. Como o(a) usuário(a)
<systemitem class="username">root</systemitem>:
    </para>

<screen role="root"><userinput>make install &amp;&amp;
install -vdm755 /etc/ssl/local</userinput></screen>

   <para>
     As the <systemitem class="username">root</systemitem> user, after installing
<xref linkend="p11-kit"/>, download the certificate source and prepare for
system use with the following command:
   </para>

    <note>
      <para>
        Se executar-se o script uma segunda vez com a mesma versão do
<filename>certdata.txt</filename>, por exemplo, para atualizar as lojas
quando o <application>make-ca</application> for atualizado; ou para
acrescentar lojas adicionais conforme o software solicitante for instalado,
[então] substitua a chave <parameter>-g</parameter> pela chave
<parameter>-r</parameter> na linha de comando. Se empacotando, [então]
execute <command>make-ca --help</command> para ver todas as opções de linha
de comando disponíveis.
      </para>
    </note>

<screen role="root"><userinput>/usr/sbin/make-ca -g</userinput></screen>

    <para>
      Você deveria atualizar periodicamente a loja com o comando acima, seja
manualmente, ou via um <phrase revision="sysv">trabalho do cron.</phrase>
<phrase revision="systemd">temporizador do systemd. Um temporizador está
instalado em <filename>/usr/lib/systemd/system/update-pki.timer</filename>
que, se habilitado, verificará as atualizações semanalmente.</phrase>
<phrase revision="sysv">Se você tiver instalado o <xref linkend="fcron"/> e
completado a seção relativa a trabalhos periódicos, [então] execute</phrase>
<phrase revision="systemd">Execute</phrase> os seguintes comandos, como o(a)
usuário(a) <systemitem class="username">root</systemitem>, para <phrase
revision="sysv">criar um trabalho semanal do cron:</phrase> <phrase
revision="systemd">habilitar o temporizador do systemd:</phrase>
    </para>

<screen role="nodump" revision="sysv"><userinput>cat &gt; /etc/cron.weekly/update-pki.sh &lt;&lt; "EOF" &amp;&amp;
<literal>#!/bin/bash
/usr/sbin/make-ca -g</literal>
EOF
chmod 754 /etc/cron.weekly/update-pki.sh</userinput></screen>

<screen role="root" revision="systemd"><userinput>systemctl enable update-pki.timer</userinput></screen>

  </sect2>

  <sect2 role="configuration" id="make-ca-config">
    <title>Configurando make-ca</title>

    <para>
      For most users, no additional configuration is necessary, however, the
default <filename>certdata.txt</filename> file provided by make-ca is
obtained from the mozilla-release branch, and is modified to provide a
Mercurial revision. This will be the correct version for most systems.
There are several other variants of the file available for use that might be
preferred for one reason or another, including the files shipped with
Mozilla products in this book. RedHat and OpenSUSE, for instance, use the
version included in <xref linkend="nss"/>. Additional upstream downloads are
available at the links included in
<filename>/etc/make-ca/make-ca.conf.dist</filename>. Simply copy the file to
<filename>/etc/make-ca.conf</filename> and edit as appropriate.
    </para>

    <indexterm zone="make-ca make-ca-config">
      <primary sortas="e-etc-make-ca-conf">/etc/make-ca.conf</primary>
    </indexterm>

    <bridgehead renderas="sect3">Acerca de Argumentos de Confiança</bridgehead>

    <para>
      Existem três tipos de confiança que são reconhecidos pelo script
<application>make-ca</application>, SSL/TLS, S/Mime e assinatura de
código. Para o <application>OpenSSL</application>, esses são
<parameter>serverAuth</parameter>; <parameter>emailProtection</parameter>; e
<parameter>codeSigning</parameter>, respectivamente. Se um dos três
argumentos de confiança for omitido, [então] o certificado nem é acreditado,
nem é rejeitado para aquela função. Os clientes que usarem o
<application>OpenSSL</application> ou o <application>NSS</application>
encontrando esse certificado apresentarão um aviso para o(a) usuário(a). Os
clientes usando o <application>GnuTLS</application> sem o suporte ao
<application>p11-kit</application> não estão cientes dos certificados
confiáveis. Para incluir essa AC nos arquivos
<filename>ca-bundle.crt</filename>, <filename>email-ca-bundle.crt</filename>
ou <filename>objsign-ca-bundle.crt</filename> (os pacotes legados do
<application>GnuTLS</application>), precisa ter os argumentos confiáveis
adequados.
    </para>

    <bridgehead renderas="sect3">Acrescentando Certificados Adicionais de AC</bridgehead>

    <para>
      O diretório <filename class="directory">/etc/ssl/local</filename> está
disponível para acrescentar certificados adicionais de AC à loja de
confiança do sistema. Esse diretório também é usado para armazenar
certificados que foram acrescentados a ou modificados na loja de confiança
do sistema pelo <xref linkend="p11-kit"/>, de forma que os valores de
confiança sejam mantidos ao longo de atualizações. Os arquivos nesse
diretório precisam estar no formato de certificado confiável do
<application>OpenSSL</application>. Os certificados importados usando o
utilitário <command>trust</command> originário do <xref linkend="p11-kit"/>
utilizarão os valores Uso Estendido de Chave x509 para atribuir valores
confiáveis padrão para as âncoras do sistema.
    </para>

    <para>Se você precisar substituir os valores de confiança ou, do contrário,
precisar criar um certificado de confiança do
<application>OpenSSL</application> manualmente a partir de um arquivo
codificado PEM comum, [então] você precisa acrescentar argumentos de
confiança ao comando <command>openssl</command> e criar um certificado
novo. Por exemplo, usando as raízes do <ulink
url="http://www.cacert.org/">CAcert</ulink>, se você quiser confiar em ambos
para todas as três funções, [então] os seguintes comandos criarão os
certificados confiáveis do OpenSSL adequados (execute como o(a) usuário(a)
<systemitem class="username">root</systemitem> depois que o <xref
linkend="wget"/> estiver instalado):
    </para>

<screen role="nodump"><userinput>wget http://www.cacert.org/certs/root.crt &amp;&amp;
wget http://www.cacert.org/certs/class3.crt &amp;&amp;
openssl x509 -in root.crt -text -fingerprint -setalias "CAcert Class 1 root" \
       -addtrust serverAuth -addtrust emailProtection -addtrust codeSigning \
        > /etc/ssl/local/CAcert_Class_1_root.pem &amp;&amp;
openssl x509 -in class3.crt -text -fingerprint -setalias "CAcert Class 3 root" \
        -addtrust serverAuth -addtrust emailProtection -addtrust codeSigning \
        > /etc/ssl/local/CAcert_Class_3_root.pem &amp;&amp;
/usr/sbin/make-ca -r</userinput></screen>

    <bridgehead renderas="sect3">Substituindo a Confiança do Mozilla</bridgehead>

    <para>
      Ocasionalmente, possivelmente existam instâncias onde você não concorda com
a inclusão do Mozilla de uma autoridade de certificação específica. Se você
gostaria de substituir a confiança padrão de uma AC específica, [então]
simplesmente crie uma cópia do certificado existente em <filename
class="directory">/etc/ssl/local</filename> com argumentos de confiança
diferentes. Por exemplo, se você gostaria de desconfiar do arquivo
"Makebelieve_CA_Root", [então] execute os seguintes comandos:
    </para>

<screen role="nodump"><userinput>openssl x509 -in /etc/ssl/certs/Makebelieve_CA_Root.pem \
            -text \
            -fingerprint \
             -setalias "Disabled Makebelieve CA Root" \
             -addreject serverAuth \
             -addreject emailProtection \
             -addreject codeSigning \
       > /etc/ssl/local/Disabled_Makebelieve_CA_Root.pem &amp;&amp;
/usr/sbin/make-ca -r</userinput></screen>

  </sect2>

  <sect2 role="configuration" id="make-ca-python">
    <title>Using make-ca with Python3</title>

    <para>
      When <application>Python3</application> was installed in LFS it included the
<application>pip3</application> module with vendored certificates from the
<application>Certifi</application> module. That was necessary, but it means
that whenever <command>pip3</command> is used it can reference those
certificates, primarily when creating a virtual environment or when
installing a module with all its wheel dependencies in one go.
    </para>

    <para>
      It is generally considered that the System Administrator should be in charge
of which certificates are available. Now that <xref linkend="make-ca"/> and
<xref linkend="p11-kit"/> have been installed and
<application>make-ca</application> has been configured, it is possible to
make <command>pip3</command> use the system certificates.
    </para>

    <para>
      The vendored certificates installed in LFS are a snapshot from when the
pulled-in version of <application>Certifi</application> was created. If you
regularly update the system certificates, the vendored version will become
out of date.
    </para>

    <para>
      To use the system certificates in <application>Python3</application> you
should set <envar>_PIP_STANDALONE_CERT</envar> to point to them, e.g for the
<application>bash</application> shell:
    </para>

<screen><userinput>export _PIP_STANDALONE_CERT=/etc/pki/tls/certs/ca-bundle.crt</userinput></screen>

    <warning>
      <para>
        If you have created virtual environments, for example when testing modules,
and those include the <application>Requests</application> and
<application>Certifi</application> modules in <filename
class="directory">~/.local/lib/python3.11/</filename> then those local
modules will be used instead of the system certificates unless you remove
the local modules.
      </para>
    </warning>

    <para>
      To use the system certificates in <application>Python3</application> with
the BLFS profiles add the following variable to your system or personal
profiles:
    </para>

<screen role="root"><userinput>mkdir -pv /etc/profile.d &amp;&amp;
cat &gt; /etc/profile.d/pythoncerts.sh &lt;&lt; "EOF"
<literal># Begin /etc/profile.d/pythoncerts.sh

export _PIP_STANDALONE_CERT=/etc/pki/tls/certs/ca-bundle.crt

# End /etc/profile.d/pythoncerts.sh</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title>Conteúdo</title>

    <segmentedlist>
      <segtitle>Aplicativos Instalados</segtitle>
      <segtitle>Diretórios Instalados</segtitle>

      <seglistitem>
        <seg>make-ca</seg>
        <seg>/etc/ssl/{certs,local} e /etc/pki/{nssdb,anchors,tls/{certs,java}}</seg>
      </seglistitem>
    </segmentedlist>

   <variablelist>
      <bridgehead renderas="sect3">Descrições Curtas</bridgehead>
      <?dbfo list-presentation="list"?> <?dbhtml list-presentation="table"?>

      <varlistentry id="make-ca-bin">
        <term><command>make-ca</command></term>
        <listitem>
          <para>
            é um script de shell que adapta uma versão atual do
<filename>certdata.txt</filename> e o apronta para uso como a loja de
confiança do sistema
          </para>
          <indexterm zone="make-ca make-ca">
            <primary sortas="b-make-ca">make-ca</primary>
          </indexterm>
        </listitem>
      </varlistentry>
   </variablelist>

  </sect2>

</sect1>
